import { TextInputProps } from './TextInput';
import { ThemeNumberInputProps } from './ThemeNumberInput';
import { FlexStyleProps, IconStyleProps } from '../../types/props';
import { ReactNode } from 'react';
interface ArrayInputProps<T> {
    /**
     * ID attribute for the input element.
     * A unique identifier for the input field.
     */
    id?: string;
    /**
     * Name attribute for the input element.
     * Used to reference the form data after submission.
     */
    name?: string;
    /**
     * Specifies whether the input field is required.
     * If true, the field must be filled out before form submission.
     */
    required?: boolean;
    /**
     * Placeholder text displayed in the input field when it is empty.
     */
    placeholder?: string;
    /**
     * Controlled values of the input fields.
     */
    values?: T[];
    /**
     * Default values for uncontrolled input fields.
     */
    defaultValues?: T[];
    /**
     * The maximum number of input fields allowed
     */
    maxItems?: number;
    /**
     * The minimum number of input fields to be always present.
     * @default 1
     */
    minItems?: number;
    /**
     * Determines whether the add button (`+`) is visible.
     * @default true
     */
    showAddButton?: boolean;
    /**
     * Determines whether the remove button (`-`) is visible.
     * @default true
     */
    showRemoveButton?: boolean;
    /**
     * Custom icon for the add button.
     */
    addIcon?: ReactNode;
    /**
     * Custom icon for the remove button.
     */
    removeIcon?: ReactNode;
    /**
     * Specifies whether input fields are text or number type.
     * @default text
     */
    type?: 'text' | 'number';
    /**
     * Layout direction of input fields.
     * @default vertical
     */
    align?: 'horizontal' | 'vertical';
    /**
     * Size of the Input Field.
     * Controls the height and padding of the component.
     * @default 'md'
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * Color variant of the TextInput.
     * Determines the primary theme color of the component.
     * @default 'neutral'
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * Visual state of the TextInput.
     * Used to represent feedback such as errors or success.
     * @default 'default'
     */
    state?: 'default' | 'error' | 'warning' | 'success' | 'perfect';
    /**
     * Theme variant of the TextInput.
     * Defines the visual style of the component (e.g., filled or outlined).
     * @default 'outlined'
     */
    theme?: 'filled' | 'outlined';
    /**
     * Indicates whether the Input field is disabled.
     * If true, the field is non-interactive and visually styled as disabled.
     */
    disabled?: boolean;
    /**
     * Additional props for `TextInput`.
     */
    textInputProps?: Partial<TextInputProps>;
    /**
     * Additional props for `ThemeNumberInput`.
     */
    numberInputProps?: Partial<ThemeNumberInputProps>;
    rootStyle?: FlexStyleProps;
    itemWrapperStyle?: FlexStyleProps;
    addIconStyle?: IconStyleProps;
    removeIconStyle?: IconStyleProps;
    validate?: (value: T) => boolean;
    onAdd?: (value: T, index: number) => void;
    onRemove?: (value: T, index: number) => void;
    onChange?: (newValues: T[]) => void;
}
/**
 * The `ArrayInput` component provides a dynamic list of input fields
 * allowing users to add or remove inputs dynamically.
 *
 * **Structure**:
 * ```tsx
 * <Root>
 *   <ItemWrapper>
 *     <Input />
 *     <Button>+</Button>
 *     <Button>-</Button>
 *   </ItemWrapper>
 * </Root>
 * ```
 *
 * **Props**:
 * @param {object} props - The properties object for the `ArrayInput` component.
 * @param {string} [props.id] - The `id` attribute for each input field.
 * @param {string} [props.name] - The `name` attribute for each input field.
 * @param {boolean} [props.required] - Specifies whether input fields are required.
 * @param {string} [props.placeholder] - Placeholder text displayed inside input fields.
 * @param {ValueType[]} [props.values] - Controlled values of the input fields.
 * @param {ValueType[]} [props.defaultValues] - Default values for uncontrolled input fields.
 * @param {number} [props.maxItems] - The maximum number of input fields allowed.
 * @param {number} [props.minItems=1] - The minimum number of input fields to be always present.
 * @param {boolean} [props.showAddButton=true] - Determines whether the add button (`+`) is visible.
 * @param {boolean} [props.showRemoveButton=true] - Determines whether the remove button (`-`) is visible.
 * @param {ReactNode} [props.addIcon] - Custom icon for the add button.
 * @param {ReactNode} [props.removeIcon] - Custom icon for the remove button.
 * @param {'text' | 'number'} [props.type='text'] - Specifies whether input fields are text or number type.
 * @param {'horizontal' | 'vertical'} [props.align='vertical'] - Layout direction of input fields.
 * @param {'sm' | 'md' | 'lg'} [props.size='md'] - Size of the input fields.
 * @param {boolean} [props.disabled] - If true, disables all inputs and buttons.
 * @param {Partial<TextInputProps>} [props.textInputProps] - Additional props for `TextInput`.
 * @param {Partial<ThemeNumberInputProps>} [props.numberInputProps] - Additional props for `ThemeNumberInput`.
 * @param {FlexStyleProps} [props.rootStyle] - Custom styles for the root `Flex` container.
 * @param {FlexStyleProps} [props.itemWrapperStyle] - Custom styles for each input wrapper.
 * @param {IconStyleProps} [props.addIconStyle] - Custom styles for the add button icon.
 * @param {IconStyleProps} [props.removeIconStyle] - Custom styles for the remove button icon.
 * @param {(value: ValueType) => boolean} [props.validate] - Validation function for input values.
 * @param {(value: ValueType, index: number) => void} [props.onAdd] - Callback triggered when a new value is added.
 * @param {(value: ValueType, index: number) => void} [props.onRemove] - Callback triggered when a value is removed.
 * @param {(newValues: ValueType[]) => void} [props.onChange] - Callback triggered when input values change.
 *
 * @returns {JSX.Element} - Renders a dynamic array input component.
 */
declare const ArrayInput: <T extends string | number>({ id, name, required, placeholder, values, defaultValues, maxItems, minItems, showAddButton, showRemoveButton, addIcon, removeIcon, type, align, size, color, state, theme, textInputProps, numberInputProps, rootStyle, itemWrapperStyle, addIconStyle, removeIconStyle, disabled, onAdd, onRemove, onChange, }: ArrayInputProps<T>) => import("react/jsx-runtime").JSX.Element;
export default ArrayInput;
