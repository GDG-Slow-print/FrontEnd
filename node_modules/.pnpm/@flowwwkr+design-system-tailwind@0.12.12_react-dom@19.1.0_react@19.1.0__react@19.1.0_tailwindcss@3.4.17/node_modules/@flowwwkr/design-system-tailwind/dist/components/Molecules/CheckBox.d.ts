import { IconStyleProps, WrapperStyleProps } from '../../types/props';
interface CheckBoxProps {
    /**
     * An optional unique identifier for the checkbox.
     */
    id?: string;
    /**
     * If true, the checkbox will be disabled and non-interactive.
     * @default false
     */
    disabled?: boolean;
    /**
     * The controlled state of the checkbox.
     * If provided, the checkbox becomes controlled.
     */
    checked?: boolean;
    /**
     * If true, the checkbox will display an indeterminate state.
     * @default false
     */
    indeterminate?: boolean;
    /**
     * A callback function that gets triggered when the checkbox state changes.
     * @param {boolean} value - The new state of the checkbox.
     */
    onChange?: (value: boolean) => void;
    /**
     * The color theme of the checkbox.
     * @default 'neutral'
     */
    color?: 'neutral' | 'primary' | 'secondary' | 'tertiary';
    /**
     * The size of the checkbox. Options are 'sm', 'md', and 'lg'.
     * @default 'md'
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * The theme style of the checkbox. Options are 'filled' and 'outlined'.
     * @default 'filled'
     */
    theme?: 'filled' | 'outlined';
    /**
     * Custom styles applied to the checkbox's container (root).
     */
    rootStyle?: WrapperStyleProps;
    /**
     * Custom styles applied to the checkbox's indicator (checkmark or line).
     */
    indicatorStyle?: IconStyleProps;
}
/**
 * The CheckBox component renders a customizable checkbox with optional states like checked, disabled, and indeterminate.
 *
 * **Structure**:
 *
tsx
 * <Root>
 *   {Indicator && <Indicator />}
 *   <input type="checkbox" />
 * </Root>
 *

 *
 *
 *
 * @component
 * @param {Object} props - Props for the CheckBox component.
 * @param {string} [props.id] - The unique identifier for the checkbox.
 * @param {boolean} [props.disabled=false] - If true, the checkbox is disabled and non-interactive.
 * @param {boolean} [props.checked] - The controlled state of the checkbox. If provided, the checkbox becomes controlled.
 * @param {boolean} [props.indeterminate=false] - If true, the checkbox will display an indeterminate state.
 * @param {function} [props.onChange] - Callback function triggered when the checkbox state changes. Receives the new state as an argument.
 * @param {'neutral' | 'primary' | 'secondary' | 'tertiary'} [props.color='neutral'] - The color theme of the checkbox.
 * @param {'sm' | 'md' | 'lg'} [props.size='md'] - The size of the checkbox. Options are 'sm', 'md', and 'lg'.
 * @param {'filled' | 'outlined'} [props.theme='filled'] - The theme style of the checkbox.
 * @param {Object} [props.rootStyle] - Custom styles applied to the checkbox's container (root).
 * @param {Object} [props.indicatorStyle] - Custom styles applied to the checkbox's indicator (checkmark or line).
 *
 *
 *
 * @example
 * <CheckBox
 *   size="lg"
 *   color="primary"
 *   indeterminate
 *   onChange={(checked) => console.log('Checked:', checked)}
 * />
 */
declare const CheckBox: ({ disabled, checked, indeterminate, onChange, color, size, theme, rootStyle, indicatorStyle, }: CheckBoxProps) => import("react/jsx-runtime").JSX.Element;
export default CheckBox;
