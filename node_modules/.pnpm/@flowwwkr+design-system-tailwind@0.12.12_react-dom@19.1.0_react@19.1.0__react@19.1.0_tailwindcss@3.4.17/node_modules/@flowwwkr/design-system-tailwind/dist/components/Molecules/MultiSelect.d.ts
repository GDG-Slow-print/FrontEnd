import { ButtonStyleProps, FlexStyleProps, IconStyleProps, ScrollStyleProps, TextStyleProps, WrapperStyleProps } from '../../types/props';
interface LabeledValue<T> {
    label: string;
    value: T;
}
type OptionType<T> = T | LabeledValue<T> | string | number;
/**
 * Interface for the MultiSelect component props.
 *
 * @template T - The type of the option value (e.g., string, number, or a custom object).
 */
interface MultiSelectProps<T> {
    /**
     * The `id` attribute for the hidden select element.
     * Used to uniquely identify the element in the DOM.
     */
    id?: string;
    /**
     * The `name` attribute for the hidden select element.
     * Used to reference the input value during form submission.
     */
    name?: string;
    /**
     * Specifies whether the select field is required.
     * If `true`, the field must be filled before form submission.
     */
    required?: boolean;
    /**
     * Specifies the limit of selected option counts.
     */
    limit?: number;
    /**
     * Array of selectable options.
     * Each option can be a string, number, or a custom labeled object (`LabeledValue`).
     */
    options: OptionType<T>[];
    /**
     * Placeholder text displayed when no option is selected.
     * Typically shown as the default content inside the dropdown trigger.
     */
    placeholder?: string;
    /**
     * The currently selected option values.
     * If provided, the component will be controlled.
     */
    value?: T[];
    /**
     * The default option value (uncontrolled).
     * Sets the initial selected option before any user interaction.
     * If `value` is also provided, `defaultValue` will be ignored.
     */
    defaultValue?: T[];
    /**
     * The size of the select field, affecting its height and padding.
     * @default 'md'
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * The color variant of the select field.
     * Controls the primary theme color of the component.
     * @default 'neutral'
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * The state variant of the select field.
     * Used to represent validation states such as `error` or `success`.
     * @default 'default'
     */
    state?: 'default' | 'error' | 'warning' | 'success' | 'perfect';
    /**
     * The theme variant of the select field, determining its visual style.
     * Options include `filled` or `outlined`.
     * @default 'outlined'
     */
    theme?: 'filled' | 'outlined';
    /**
     * Indicates whether the select field is disabled.
     * If `true`, the dropdown becomes non-interactive.
     */
    disabled?: boolean;
    /**
     * Style properties for the root container element (`<Wrapper>`).
     */
    rootStyle?: WrapperStyleProps;
    /**
     * Style properties for the dropdown trigger element (`<Flex>`).
     */
    triggerStyle?: FlexStyleProps;
    /**
     * Style properties for the text inside the dropdown trigger (`<Text>`).
     */
    triggerTextStyle?: TextStyleProps;
    /**
     * Style properties for the dropdown icon inside the trigger (`<IconArrow>`).
     */
    triggerIconStyle?: IconStyleProps;
    /**
     * Style properties for the menu wrapper element (`<Wrapper>`).
     */
    menuWrapperStyle?: WrapperStyleProps;
    /**
     * Style properties for the menu scroll container (`<Scroll>`).
     */
    menuStyle?: ScrollStyleProps;
    /**
     * Style properties for the individual option element (`<Button>`).
     */
    optionStyle?: ButtonStyleProps;
    /**
     * Style properties for the text inside each option (`<Text>`).
     */
    optionTextStyle?: TextStyleProps;
    /**
     * Style properties for the icon inside each option (`<IconArrow>`).
     */
    optionIconStyle?: IconStyleProps;
    /**
     * Style properties for the scroll nudger container (`<Wrapper>`).
     * Used to indicate scrollable content within the dropdown.
     */
    scrollNudgerStyle?: WrapperStyleProps;
    /**
     * Style properties for the scroll icon inside the nudger (`<IconArrow>`).
     */
    scrollIconStyle?: IconStyleProps;
    /**
     * Callback function triggered when an option is selected.
     * @param value - The selected option value.
     */
    onChange?: (selected: T[]) => void;
}
/**
 * The Multiple Select Component for creating a customizable Dropdown field.
 *
 * **Structure**:
 * ```tsx
 * <Root>
 *   <Trigger>
 *     <TriggerText></TriggerText>
 *     <TriggerIcon></TriggerIcon>
 *   </Trigger>
 *   <MenuWrapper>
 *     <ScrollNudger>
 *       <ScrollIcon></ScrollIcon>
 *     </ScrollNudger>
 *     <Menu>
 *       <Option>
 *         <OptionText></OptionText>
 *         <OptionIcon></OptionIcon>
 *       </Option>
 *       <Option>
 *         <OptionText></OptionText>
 *         <OptionIcon></OptionIcon>
 *       </Option>
 *     </Menu>
 *     <ScrollNudger>
 *       <ScrollIcon></ScrollIcon>
 *     </ScrollNudger>
 *   </MenuWrapper>
 * </Root>
 * ```
 *
 * **Props**:
 * @template T - The type of the option value.
 * @param {object} props - The properties object for the Select component.
 * @param {string} [props.id] - The `id` attribute of the hidden select field for accessibility.
 * @param {string} [props.name] - The `name` attribute of the hidden select field, used in forms.
 * @param {boolean} [props.required] - Specifies whether the field is required. If `true`, the field must be filled before submission.
 * @param {OptionType<T>[]} props.options - The list of options to display in the dropdown. Each option can be a string, number, or a custom object.
 * @param {string} [props.placeholder] - The placeholder text displayed when no option is selected.
 * @param {OptionType<T>} [props.value] - The selected option value. If provided, the component will be controlled.
 * * @param {T} [props.defaultValue] - The default (initial) option value for uncontrolled usage. Ignored if `value` is also provided.
 * @param {'sm' | 'md' | 'lg'} [props.size] - The size of the dropdown field. Determines height and padding. Defaults to `'md'`.
 * @param {'primary' | 'secondary' | 'tertiary' | 'neutral'} [props.color] - The color theme of the component. Defaults to `'neutral'`.
 * @param {'default' | 'error' | 'warning' | 'success' | 'perfect'} [props.state] - The visual state of the dropdown for feedback purposes. Defaults to `'default'`.
 * @param {'filled' | 'outlined'} [props.theme] - The theme variant of the dropdown. Defaults to `'outlined'`.
 * @param {boolean} [props.disabled] - If `true`, disables the dropdown, making it non-interactive.
 * @param {WrapperStyleProps} [props.rootStyle] - Style properties for the root wrapper (`<Root>`).
 * @param {FlexStyleProps} [props.triggerStyle] - Style properties for the trigger button (`<Trigger>`).
 * @param {TextStyleProps} [props.triggerTextStyle] - Style properties for the text inside the trigger (`<TriggerText>`).
 * @param {IconStyleProps} [props.triggerIconStyle] - Style properties for the dropdown icon (`<TriggerIcon>`).
 * @param {WrapperStyleProps} [props.menuWrapperStyle] - Style properties for the menu wrapper (`<MenuWrapper>`).
 * @param {ScrollStyleProps} [props.menuStyle] - Style properties for the menu scroll container (`<Menu>`).
 * @param {ButtonStyleProps} [props.optionStyle] - Style properties for each dropdown option (`<Option>`).
 * @param {TextStyleProps} [props.optionTextStyle] - Style properties for the text inside each option (`<OptionText>`).
 * @param {IconStyleProps} [props.optionIconStyle] - Style properties for the icon inside each option (`<OptionIcon>`).
 * @param {WrapperStyleProps} [props.scrollNudgerStyle] - Style properties for the scroll nudger container (`<ScrollNudger>`).
 * @param {IconStyleProps} [props.scrollIconStyle] - Style properties for the scroll icon (`<ScrollIcon>`).
 * @param {(value: T) => void} [props.onChange] - Callback function called when an option is selected.
 *   @param {T} value - The selected option value.
 */
declare const MultiSelect: <T extends object | string | number>({ id, name, required, limit, options, placeholder, value, defaultValue, size, color, state, theme, disabled, onChange, rootStyle, triggerStyle, triggerTextStyle, triggerIconStyle, menuWrapperStyle, menuStyle, optionStyle, optionTextStyle, optionIconStyle, scrollNudgerStyle, scrollIconStyle, }: MultiSelectProps<T>) => import("react/jsx-runtime").JSX.Element;
export default MultiSelect;
