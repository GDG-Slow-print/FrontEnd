import { ButtonStyleProps, FlexStyleProps, IconStyleProps } from '../../types/props';
interface PasswordInputProps {
    /**
     * ID attribute for the input element.
     * A unique identifier for the input field.
     */
    id?: string;
    /**
     * Name attribute for the input element.
     * Used to reference the form data after submission.
     */
    name?: string;
    /**
     * Specifies whether the input field is required.
     * If true, the field must be filled out before form submission.
     */
    required?: boolean;
    /**
     * Placeholder text displayed in the input field when it is empty.
     */
    placeholder?: string;
    /**
     * The current value of the PasswordInput.
     */
    value?: string;
    /**
     * The default value of the PasswordInput (uncontrolled).
     * Used to set the initial value before the user interacts with it.
     * If `value` is also provided, `defaultValue` is ignored.
     */
    defaultValue?: string;
    /**
     * Size of the PasswordInput.
     * Controls the height and padding of the component.
     * @default 'md'
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * Color variant of the PasswordInput.
     * Determines the primary theme color of the component.
     * @default 'neutral'
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * Visual state of the PasswordInput.
     * Used to represent feedback such as errors or success.
     * @default 'default'
     */
    state?: 'default' | 'error' | 'warning' | 'success' | 'perfect';
    /**
     * Theme variant of the PasswordInput.
     * Defines the visual style of the component (e.g., filled or outlined).
     * @default 'outlined'
     */
    theme?: 'filled' | 'outlined';
    /**
     * Indicates whether the PasswordInput field is disabled.
     * If true, the field is non-interactive and visually styled as disabled.
     */
    disabled?: boolean;
    /**
     * Style properties for the container of the PasswordInput (root element).
     * Should follow the <Flex> component style conventions.
     */
    rootStyle?: FlexStyleProps;
    /**
     * Style properties for the input field itself.
     * Should follow the <Input> component style conventions.
     */
    inputStyle?: FlexStyleProps;
    /**
     * Style properties for the toggle button used to show or hide the password.
     * Should follow the <Button theme='ghost'> component style conventions.
     */
    toggleStyle?: ButtonStyleProps;
    /**
     * Style properties for the toggle icon inside the toggle button.
     * Should follow the <Icon> component style conventions.
     */
    toggleIconStyle?: IconStyleProps;
    /**
     * Callback function triggered when the value of the PasswordInput changes.
     * @param {string} value - The new value of the PasswordInput.
     */
    onChange?: (value: string) => void;
}
/**
 * The PasswordInput Component for creating a password input field with a toggleable visibility feature.
 *
 * **Structure**:
 * ```tsx
 * <Root>
 *   <Input />
 *   <Toggle>
 *     <ToggleIcon />
 *   </Toggle>
 * </Root>
 * ```
 *
 * **Props**:
 * @param {object} props - The properties object for the PasswordInput component.
 * @param {string} [props.name] - The `name` attribute of the input field, used to identify the input in forms.
 * @param {boolean} [props.required] - Specifies whether the field is required. If `true`, the input must be filled out before form submission.
 * @param {string} [props.placeholder] - Placeholder text displayed inside the input field when it is empty.
 * @param {string} [props.value] - The current value of the input field. This makes the component controlled when provided.
 * @param {string} [props.defaultValue] - The default value of the input field, used for **uncontrolled** usage.
 *   If `value` is also provided, `defaultValue` will be ignored.
 * @param {'sm' | 'md' | 'lg'} [props.size] - The size of the PasswordInput, which controls the height and padding. Defaults to `'md'`.
 * @param {'primary' | 'secondary' | 'tertiary' | 'neutral'} [props.color] - The color variant of the PasswordInput. Defaults to `'neutral'`.
 * @param {'default' | 'error' | 'warning' | 'success' | 'perfect'} [props.state] - The visual state of the PasswordInput for feedback purposes. Defaults to `'default'`.
 * @param {'filled' | 'outlined'} [props.theme] - The theme of the PasswordInput. Determines the visual style. Defaults to `'outlined'`.
 * @param {boolean} [props.disabled] - Indicates whether the PasswordInput is disabled. If `true`, the input field is non-interactive.
 * @param {FlexStyleProps} [props.rootStyle] - Style properties applied to the root `<Flex>` element, which wraps the input and toggle button.
 * @param {InputStyleProps} [props.inputStyle] - Style properties applied directly to the `<Input>` element.
 * @param {ButtonStyleProps} [props.toggleStyle] - Style properties applied to the toggle button, used for showing/hiding the password.
 * @param {IconStyleProps} [props.toggleIconStyle] - Style properties applied to the toggle icon inside the button.
 * @param {Function} [props.onChange] - Callback function triggered when the input value changes.
 *   @param {string} value - The updated value of the PasswordInput.
 */
declare const PasswordInput: ({ id, name, required, value, defaultValue, placeholder, size, color, state, theme, onChange, rootStyle, inputStyle, toggleStyle, toggleIconStyle, disabled, }: PasswordInputProps) => import("react/jsx-runtime").JSX.Element;
export default PasswordInput;
