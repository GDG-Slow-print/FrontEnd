"use client";
import { jsxs as ho, jsx as u } from "react/jsx-runtime";
import { useState as Z } from "react";
import jo from "../Atoms/Button.js";
import wo from "../Atoms/Flex.js";
import d from "../../utils/deepMerge.js";
import Co from "../Icons/IconShow.js";
import xo from "../Icons/IconHide.js";
import Io from "../Atoms/Input.js";
const Ro = ({
  id: _,
  name: $,
  required: oo,
  value: y,
  defaultValue: to,
  placeholder: ro,
  size: r = "md",
  color: c = "neutral",
  state: o = "default",
  theme: l = "outlined",
  onChange: a,
  rootStyle: lo,
  inputStyle: eo,
  toggleStyle: co,
  toggleIconStyle: no,
  disabled: S
}) => {
  var b, p, g, m, h, j, w, C, x, I, z, V, X, D, T, W, v, P, R, F, L, k, B, H, M, q, A, E, G, J, K, N, O, Q, U, Y;
  const [io, yo] = Z(
    y || to || ""
  ), [s, uo] = Z(!1), e = {
    sm: {
      rootStyle: {
        width: "w-24",
        height: "h-2.75",
        paddingX: "px-1",
        gap: "g-1"
      },
      inputStyle: { font: "f-1.5" },
      buttonStyle: { size: "sz-1.75" }
    },
    md: {
      rootStyle: {
        width: "w-32",
        height: "h-4.25",
        paddingX: "px-1.5",
        gap: "g-1.5"
      },
      inputStyle: { font: "f-1.75" },
      buttonStyle: { size: "sz-2.25" }
    },
    lg: {
      rootStyle: {
        width: "w-40",
        height: "h-4.5",
        paddingX: "px-1.5",
        gap: "g-1.5"
      },
      inputStyle: { font: "f-2" },
      buttonStyle: { size: "sz-2.5" }
    }
  }, t = {
    error: {
      filled: {
        rootStyle: { color: "c-error-sf-01" },
        inputStyle: { color: "c-error-obj-01" },
        buttonStyle: { color: "c-error-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-error-mid" },
        inputStyle: { color: "c-error-mid" },
        buttonStyle: { color: "c-error-obj-01" }
      }
    },
    warning: {
      filled: {
        rootStyle: { color: "c-warning-sf-01" },
        inputStyle: { color: "c-warning-obj-01" },
        buttonStyle: { color: "c-warning-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-warning-mid" },
        inputStyle: { color: "c-warning-mid" },
        buttonStyle: { color: "c-warning-obj-01" }
      }
    },
    success: {
      filled: {
        rootStyle: { color: "c-success-sf-01" },
        inputStyle: { color: "c-success-obj-01" },
        buttonStyle: { color: "c-success-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-success-mid" },
        inputStyle: { color: "c-success-mid" },
        buttonStyle: { color: "c-success-obj-01" }
      }
    },
    perfect: {
      filled: {
        rootStyle: { color: "c-perfect-sf-01" },
        inputStyle: { color: "c-perfect-obj-01" },
        buttonStyle: { color: "c-perfect-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-perfect-mid" },
        inputStyle: { color: "c-perfect-mid" },
        buttonStyle: { color: "c-perfect-obj-01" }
      }
    }
  }, n = {
    primary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-primary-sf-01" },
        inputStyle: { color: "c-primary-obj" },
        buttonStyle: { color: "c-primary-obj-02" }
      } : (b = t[o]) == null ? void 0 : b.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-primary-mid" },
        inputStyle: { color: "c-primary-obj" },
        buttonStyle: { color: "c-primary-obj-02" }
      } : (p = t[o]) == null ? void 0 : p.outlined
    },
    secondary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-secondary-sf-01" },
        inputStyle: { color: "c-secondary-obj" },
        buttonStyle: { color: "c-secondary-obj-02" }
      } : (g = t[o]) == null ? void 0 : g.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-secondary-mid" },
        inputStyle: { color: "c-secondary-obj" },
        buttonStyle: { color: "c-secondary-obj-02" }
      } : (m = t[o]) == null ? void 0 : m.outlined
    },
    tertiary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-tertiary-sf-01" },
        inputStyle: { color: "c-tertiary-obj" },
        buttonStyle: { color: "c-tertiary-obj-02" }
      } : (h = t[o]) == null ? void 0 : h.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-tertiary-mid" },
        inputStyle: { color: "c-tertiary-obj" },
        buttonStyle: { color: "c-tertiary-obj-02" }
      } : (j = t[o]) == null ? void 0 : j.outlined
    },
    neutral: {
      filled: o === "default" ? {
        rootStyle: { color: "c-neutral-sf-01" },
        inputStyle: { color: "c-neutral-obj" },
        buttonStyle: { color: "c-neutral-obj-02" }
      } : (w = t[o]) == null ? void 0 : w.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-neutral-mid" },
        inputStyle: { color: "c-neutral-obj" },
        buttonStyle: { color: "c-neutral-obj-02" }
      } : (C = t[o]) == null ? void 0 : C.outlined
    }
  }, f = {
    outlined: {
      rootStyle: {
        borderWidth: "bw-0.125",
        borderStyle: "bs-solid"
      }
    },
    filled: {}
  }, ao = wo, So = {
    position: "relative",
    width: (I = (x = e[r]) == null ? void 0 : x.rootStyle) == null ? void 0 : I.width,
    height: (V = (z = e[r]) == null ? void 0 : z.rootStyle) == null ? void 0 : V.height,
    paddingX: (D = (X = e[r]) == null ? void 0 : X.rootStyle) == null ? void 0 : D.paddingX,
    gap: (W = (T = e[r]) == null ? void 0 : T.rootStyle) == null ? void 0 : W.gap,
    alignItems: "ai-center",
    alignContent: "ac-center",
    color: (R = (P = (v = n[c]) == null ? void 0 : v[l]) == null ? void 0 : P.rootStyle) == null ? void 0 : R.color,
    opacity: S ? "oc-0.5" : "oc-1",
    borderRadius: "rad-0.5",
    borderStyle: (L = (F = f[l]) == null ? void 0 : F.rootStyle) == null ? void 0 : L.borderStyle,
    borderWidth: (B = (k = f[l]) == null ? void 0 : k.rootStyle) == null ? void 0 : B.borderWidth,
    borderColor: (q = (M = (H = n[c]) == null ? void 0 : H[l]) == null ? void 0 : M.rootStyle) == null ? void 0 : q.borderColor
  }, so = {
    grow: "grow-1",
    minWidth: "mw-0",
    fontFamily: "ff-primary",
    font: (E = (A = e[r]) == null ? void 0 : A.inputStyle) == null ? void 0 : E.font,
    color: (K = (J = (G = n[c]) == null ? void 0 : G[l]) == null ? void 0 : J.inputStyle) == null ? void 0 : K.color
  }, fo = jo, bo = {
    size: (O = (N = e[r]) == null ? void 0 : N.buttonStyle) == null ? void 0 : O.size,
    color: (Y = (U = (Q = n[c]) == null ? void 0 : Q[l]) == null ? void 0 : U.buttonStyle) == null ? void 0 : Y.color
  }, po = s ? xo : Co, go = {
    color: "c-inherit",
    size: "sz-full"
  }, mo = (i) => {
    a ? a(i.target.value) : yo(i.target.value);
  };
  return /* @__PURE__ */ ho(ao, { ...d(So, lo || {}), noDefaultStyle: !0, children: [
    /* @__PURE__ */ u(
      Io,
      {
        id: _,
        type: s ? "text" : "password",
        name: $,
        required: oo,
        value: y !== void 0 ? y : io,
        placeholder: ro,
        onChange: mo,
        ...d(so, eo || {}),
        disabled: S,
        noDefaultStyle: !0
      }
    ),
    /* @__PURE__ */ u(
      fo,
      {
        theme: "plain",
        onClick: () => uo((i) => !i),
        ...d(bo, co || {}),
        noDefaultStyle: !0,
        hover: !0,
        children: /* @__PURE__ */ u(
          po,
          {
            ...d(go, no || {}),
            noDefaultStyle: !0
          }
        )
      }
    )
  ] });
};
export {
  Ro as default
};
