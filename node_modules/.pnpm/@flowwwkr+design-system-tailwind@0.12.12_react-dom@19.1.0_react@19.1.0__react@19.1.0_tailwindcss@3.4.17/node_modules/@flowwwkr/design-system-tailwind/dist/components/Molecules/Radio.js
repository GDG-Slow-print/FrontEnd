"use client";
import { jsx as l, jsxs as R } from "react/jsx-runtime";
import i from "../Atoms/Flex.js";
import h from "../Atoms/FlexWithRef.js";
import v from "../Atoms/Text.js";
import d from "../../utils/deepMerge.js";
const k = ({
  name: n,
  value: c,
  onChange: e,
  options: o,
  enableIcon: s,
  disableIcon: u,
  labelTextStyle: b,
  size: t = "sm",
  rootWrapperStyle: m,
  itemWrapperStyle: f
}) => {
  const y = {
    sm: "h-2 w-2 bw-0.125",
    md: "h-3 w-3 bw-0.125",
    lg: "h-4.5 w-4.5 bw-0.25"
  }, C = {
    sm: "h-1.25 w-1.25",
    md: "h-2.25 w-2.25",
    lg: "h-3.5 w-3.5"
  }, a = {
    primary: {
      outerCircle: {
        borderColor: "bc-primary-obj"
      },
      innerCircle: {
        color: "c-primary-obj"
      }
    },
    secondary: {
      outerCircle: {
        borderColor: "bc-secondary-obj"
      },
      innerCircle: {
        color: "c-secondary-obj"
      }
    },
    tertiary: {
      outerCircle: {
        borderColor: "bc-tertiary-obj"
      },
      innerCircle: {
        color: "c-tertiary-obj"
      }
    },
    neutral: {
      outerCircle: {
        borderColor: "bc-neutral-obj"
      },
      innerCircle: {
        color: "c-neutral-obj"
      }
    }
  }, S = {
    direction: "flex-row",
    alignItems: "ai-center",
    gap: "g-1"
  }, j = {
    direction: "flex-row",
    alignItems: "ai-center",
    cursor: "cs-pointer",
    gap: "g-1"
  }, w = {
    borderColor: a.neutral.outerCircle.borderColor,
    borderStyle: "bs-solid",
    borderRadius: "rad-circle",
    justifyContent: "jc-center",
    alignItems: "ai-center"
  }, p = {
    color: a.neutral.innerCircle.color,
    borderRadius: "rad-circle"
  }, x = {
    color: a.neutral.innerCircle.color,
    fontSize: t === "sm" ? "fs-2" : t === "md" ? "fs-3" : "fs-4.5"
  };
  return /* @__PURE__ */ l(
    h,
    {
      ...d(S, m || {}),
      noDefaultStyle: !0,
      children: o == null ? void 0 : o.map((r) => /* @__PURE__ */ R(
        i,
        {
          ...d(j, f || {}),
          cursor: r.disable ? "cs-not-allowed" : "cs-pointer",
          opacity: r.disable ? "oc-0.5" : "oc-1",
          noDefaultStyle: !0,
          htmlAttributes: {
            onClick: () => !r.disable && (e == null ? void 0 : e(r.value))
          },
          children: [
            /* @__PURE__ */ l(
              "input",
              {
                className: "hidden",
                type: "radio",
                name: n,
                value: String(r.value),
                checked: c === r.value,
                onChange: () => e == null ? void 0 : e(r.value)
              }
            ),
            s && u ? (
              // 커스텀 아이콘 사용 시
              c === r.value ? s : u
            ) : (
              // 기본 아이콘 사용 시
              /* @__PURE__ */ l(
                i,
                {
                  noDefaultStyle: !0,
                  className: y[t],
                  ...w,
                  children: c === r.value && /* @__PURE__ */ l(
                    i,
                    {
                      noDefaultStyle: !0,
                      className: C[t],
                      ...p
                    }
                  )
                }
              )
            ),
            typeof r.label == "string" ? (
              // 라벨이 문자열일 때
              /* @__PURE__ */ l(v, { ...d(x, b || {}), children: r.label })
            ) : (
              // 라벨이 문자열이 아닐 때 (React.ReactNode일 때)
              r.label
            )
          ]
        }
      ))
    }
  );
};
export {
  k as default
};
