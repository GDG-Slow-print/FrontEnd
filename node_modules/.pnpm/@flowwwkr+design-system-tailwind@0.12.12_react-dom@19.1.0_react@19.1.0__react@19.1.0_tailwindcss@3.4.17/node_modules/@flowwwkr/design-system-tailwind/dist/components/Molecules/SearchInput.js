"use client";
import { jsxs as mo, jsx as u } from "react/jsx-runtime";
import { useState as ho } from "react";
import jo from "../Atoms/Input.js";
import wo from "../Atoms/Flex.js";
import Co from "../Icons/IconSearch.js";
import xo from "../Atoms/Button.js";
import y from "../../utils/deepMerge.js";
const Ro = ({
  id: $,
  name: oo,
  required: to,
  value: d,
  defaultValue: ro,
  placeholder: lo,
  size: r = "md",
  color: c = "neutral",
  state: o = "default",
  theme: l = "outlined",
  onChange: a,
  rootStyle: eo,
  inputStyle: co,
  toggleStyle: no,
  searchIconStyle: io,
  disabled: S,
  onSearch: f
}) => {
  var g, m, h, j, w, C, x, z, D, I, V, X, W, v, R, k, F, K, L, T, B, E, M, q, A, G, H, J, N, O, P, Q, U, Y, Z, _;
  const [b, yo] = ho(
    d || ro || ""
  ), e = {
    sm: {
      rootStyle: {
        width: "w-24",
        height: "h-2.75",
        paddingX: "px-1",
        gap: "g-1"
      },
      inputStyle: { font: "f-1.5" },
      buttonStyle: { size: "sz-1.75" }
    },
    md: {
      rootStyle: {
        width: "w-32",
        height: "h-4.25",
        paddingX: "px-1.5",
        gap: "g-1.5"
      },
      inputStyle: { font: "f-1.75" },
      buttonStyle: { size: "sz-2.25" }
    },
    lg: {
      rootStyle: {
        width: "w-40",
        height: "h-4.5",
        paddingX: "px-1.5",
        gap: "g-1.5"
      },
      inputStyle: { font: "f-2" },
      buttonStyle: { size: "sz-2.5" }
    }
  }, t = {
    error: {
      filled: {
        rootStyle: { color: "c-error-sf-01" },
        inputStyle: { color: "c-error-obj-01" },
        buttonStyle: { color: "c-error-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-error-mid" },
        inputStyle: { color: "c-error-mid" },
        buttonStyle: { color: "c-error-obj-01" }
      }
    },
    warning: {
      filled: {
        rootStyle: { color: "c-warning-sf-01" },
        inputStyle: { color: "c-warning-obj-01" },
        buttonStyle: { color: "c-warning-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-warning-mid" },
        inputStyle: { color: "c-warning-mid" },
        buttonStyle: { color: "c-warning-obj-01" }
      }
    },
    success: {
      filled: {
        rootStyle: { color: "c-success-sf-01" },
        inputStyle: { color: "c-success-obj-01" },
        buttonStyle: { color: "c-success-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-success-mid" },
        inputStyle: { color: "c-success-mid" },
        buttonStyle: { color: "c-success-obj-01" }
      }
    },
    perfect: {
      filled: {
        rootStyle: { color: "c-perfect-sf-01" },
        inputStyle: { color: "c-perfect-obj-01" },
        buttonStyle: { color: "c-perfect-sf-04" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-perfect-mid" },
        inputStyle: { color: "c-perfect-mid" },
        buttonStyle: { color: "c-perfect-obj-01" }
      }
    }
  }, n = {
    primary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-primary-sf-01" },
        inputStyle: { color: "c-primary-obj" },
        buttonStyle: { color: "c-primary-obj-02" }
      } : (g = t[o]) == null ? void 0 : g.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-primary-mid" },
        inputStyle: { color: "c-primary-obj" },
        buttonStyle: { color: "c-primary-obj-02" }
      } : (m = t[o]) == null ? void 0 : m.outlined
    },
    secondary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-secondary-sf-01" },
        inputStyle: { color: "c-secondary-obj" },
        buttonStyle: { color: "c-secondary-obj-02" }
      } : (h = t[o]) == null ? void 0 : h.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-secondary-mid" },
        inputStyle: { color: "c-secondary-obj" },
        buttonStyle: { color: "c-secondary-obj-02" }
      } : (j = t[o]) == null ? void 0 : j.outlined
    },
    tertiary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-tertiary-sf-01" },
        inputStyle: { color: "c-tertiary-obj" },
        buttonStyle: { color: "c-tertiary-obj-02" }
      } : (w = t[o]) == null ? void 0 : w.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-tertiary-mid" },
        inputStyle: { color: "c-tertiary-obj" },
        buttonStyle: { color: "c-tertiary-obj-02" }
      } : (C = t[o]) == null ? void 0 : C.outlined
    },
    neutral: {
      filled: o === "default" ? {
        rootStyle: { color: "c-neutral-sf-01" },
        inputStyle: { color: "c-neutral-obj" },
        buttonStyle: { color: "c-neutral-obj-02" }
      } : (x = t[o]) == null ? void 0 : x.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-neutral-mid" },
        inputStyle: { color: "c-neutral-obj" },
        buttonStyle: { color: "c-neutral-obj-02" }
      } : (z = t[o]) == null ? void 0 : z.outlined
    }
  }, p = {
    outlined: {
      rootStyle: {
        borderWidth: "bw-0.125",
        borderStyle: "bs-solid"
      }
    },
    filled: {}
  }, uo = wo, ao = {
    position: "relative",
    width: (I = (D = e[r]) == null ? void 0 : D.rootStyle) == null ? void 0 : I.width,
    height: (X = (V = e[r]) == null ? void 0 : V.rootStyle) == null ? void 0 : X.height,
    paddingX: (v = (W = e[r]) == null ? void 0 : W.rootStyle) == null ? void 0 : v.paddingX,
    gap: (k = (R = e[r]) == null ? void 0 : R.rootStyle) == null ? void 0 : k.gap,
    alignItems: "ai-center",
    alignContent: "ac-center",
    color: (L = (K = (F = n[c]) == null ? void 0 : F[l]) == null ? void 0 : K.rootStyle) == null ? void 0 : L.color,
    opacity: S ? "oc-0.5" : "oc-1",
    borderRadius: "rad-0.5",
    borderStyle: (B = (T = p[l]) == null ? void 0 : T.rootStyle) == null ? void 0 : B.borderStyle,
    borderWidth: (M = (E = p[l]) == null ? void 0 : E.rootStyle) == null ? void 0 : M.borderWidth,
    borderColor: (G = (A = (q = n[c]) == null ? void 0 : q[l]) == null ? void 0 : A.rootStyle) == null ? void 0 : G.borderColor
  }, So = {
    grow: "grow-1",
    minWidth: "mw-0",
    fontFamily: "ff-primary",
    font: (J = (H = e[r]) == null ? void 0 : H.inputStyle) == null ? void 0 : J.font,
    color: (P = (O = (N = n[c]) == null ? void 0 : N[l]) == null ? void 0 : O.inputStyle) == null ? void 0 : P.color
  }, fo = xo, bo = {
    size: (U = (Q = e[r]) == null ? void 0 : Q.buttonStyle) == null ? void 0 : U.size,
    color: (_ = (Z = (Y = n[c]) == null ? void 0 : Y[l]) == null ? void 0 : Z.buttonStyle) == null ? void 0 : _.color
  }, po = {
    color: "c-inherit",
    size: "sz-full"
  }, so = (i) => {
    a ? a(i.target.value) : yo(i.target.value);
  }, s = () => {
    f && f(b);
  }, go = (i) => {
    i.key === "Enter" && s();
  };
  return /* @__PURE__ */ mo(uo, { ...y(ao, eo || {}), noDefaultStyle: !0, children: [
    /* @__PURE__ */ u(
      jo,
      {
        id: $,
        type: "text",
        name: oo,
        required: to,
        value: d !== void 0 ? d : b,
        placeholder: lo,
        onChange: so,
        ...y(So, co || {}),
        disabled: S,
        onKeyDown: go,
        noDefaultStyle: !0
      }
    ),
    /* @__PURE__ */ u(
      fo,
      {
        theme: "plain",
        ...y(bo, no || {}),
        noDefaultStyle: !0,
        hover: !0,
        onClick: s,
        children: /* @__PURE__ */ u(
          Co,
          {
            ...y(po, io || {}),
            noDefaultStyle: !0
          }
        )
      }
    )
  ] });
};
export {
  Ro as default
};
