import { BlockStyleProps, ButtonStyleProps } from '../../types/props';
interface SwitchProps {
    /**
     * The unique identifier for the thumb element.
     */
    id?: string;
    /**
     * The `name` attribute for the hidden input element.
     * Used to reference the input value during form submission.
     */
    name?: string;
    /**
     * The size of the switch. Options are 'md' (medium) and 'lg' (large).
     * @default 'md'
     */
    size?: 'md' | 'lg';
    /**
     * The color theme of the switch. Options are 'primary', 'secondary', 'tertiary', and 'neutral'.
     * @default 'primary'
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * If true, the color is neutral when 'off' state
     * @default 'false'
     */
    offNeutral?: boolean;
    /**
     * The border radius size of the switch and thumb. Options are 'sm', 'md', and 'lg'.
     * @default 'lg'
     */
    radius?: 'sm' | 'md' | 'lg';
    /**
     * If true, the switch is disabled and non-interactive.
     * @default false
     */
    disabled?: boolean;
    /**
     * Custom styles for the root (container) of the switch.
     */
    rootStyle?: ButtonStyleProps;
    /**
     * Custom styles for the thumb of the switch.
     */
    thumbStyle?: BlockStyleProps;
    /**
     * The currently selected state.
     * If provided, the component will be controlled.
     * @default false
     */
    isOn?: boolean;
    /**
     * Callback function invoked when the switch is toggled. Receives the new state as an argument.
     */
    onToggle?: (selected: boolean) => void;
}
/**
 * The Switch component that allows the user to toggle between selected and not selected.
 *
 * **Structure**:
 * ```tsx
 * <Root>
 *   <Thumb />
 * </Root>
 * ```
 * @component
 * @param {Object} props - Props for the Switch component.
 * @param {string} [props.id] - The unique identifier for the thumb element.
 * @param {string} [props.name] -  The `name` attribute for the hidden input element.
 * @param {'md' | 'lg'} [props.size='md'] - The size of the switch. Options are 'md' (medium) and 'lg' (large).
 * @param {'primary' | 'secondary' | 'tertiary' | 'neutral'} [props.color='primary'] - The color theme of the switch.
 * @param {boolean} [props.offNeutral=false] - If true, the color is neutral when 'off' state
 * @param {'sm' | 'md' | 'lg'} [props.radius='lg'] - The border radius size of the switch and thumb.
 * @param {boolean} [props.disabled=false] - If true, the switch is disabled and non-interactive.
 * @param {Object} [props.rootStyle] - Custom styles for the root (container) of the switch.
 * @param {Object} [props.thumbStyle] - Custom styles for the thumb of the switch.
 * @param {boolean} [props.isOn=false] - The initial state of the switch (on or off).
 * @param {function} [props.onToggle] - Callback function invoked when the switch is toggled. Receives the new state as an argument.
 *
 * @example
 * <Switch
 *   size="lg"
 *   color="primary"
 *   offNeutral
 *   radius="md"
 *   onToggle={(newState) => console.log('Switch toggled:', newState)}
 * />
 */
declare const Switch: ({ id, name, size, color, offNeutral, radius, rootStyle, thumbStyle, isOn, onToggle, disabled, }: SwitchProps) => import("react/jsx-runtime").JSX.Element;
export default Switch;
