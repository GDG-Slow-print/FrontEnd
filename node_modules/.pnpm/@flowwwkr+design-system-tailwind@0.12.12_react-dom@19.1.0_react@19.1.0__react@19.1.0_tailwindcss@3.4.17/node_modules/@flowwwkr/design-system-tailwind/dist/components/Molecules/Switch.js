import { jsxs as q, jsx as l } from "react/jsx-runtime";
import T from "../../utils/deepMerge.js";
import { useState as v, useEffect as A } from "react";
import G from "../Atoms/Block.js";
import H from "../Atoms/Button.js";
import J from "../Atoms/WrapperWithRef.js";
const Z = ({
  id: s,
  name: V,
  size: e = "md",
  color: B = "primary",
  offNeutral: r = !1,
  radius: i = "lg",
  rootStyle: C,
  thumbStyle: D,
  isOn: a = !1,
  onToggle: d,
  disabled: o
}) => {
  var y, p, m, S, f, b, g, x, R, w, j, k;
  const [t, n] = v(a);
  A(() => {
    n(a);
  }, [a]);
  const c = {
    md: {
      rootStyle: {
        width: "w-[44px]",
        height: "h-3",
        padding: "p-0.25"
      }
    },
    lg: {
      rootStyle: {
        width: "w-[66px]",
        height: "h-[36px]",
        padding: "p-[3px]"
      }
    }
  }, h = {
    sm: {
      rootStyle: {
        borderRadius: "rad-[6px]"
      },
      thumbStyle: {
        borderRadius: "rad-[3px]"
      }
    },
    md: {
      rootStyle: {
        borderRadius: "rad-[12px]"
      },
      thumbStyle: {
        borderRadius: "rad-[8px]"
      }
    },
    lg: {
      rootStyle: {
        borderRadius: "rad-[24px]"
      },
      thumbStyle: {
        borderRadius: "rad-[24px]"
      }
    }
  }, I = {
    primary: {
      rootStyle: {
        color: t ? "c-primary-obj" : r ? "c-neutral-sf-02" : "c-primary-sf-02"
      }
    },
    secondary: {
      rootStyle: {
        color: t ? "c-secondary-obj" : r ? "c-neutral-sf-02" : "c-secondary-sf-02"
      }
    },
    tertiary: {
      rootStyle: {
        color: t ? "c-tertiary-obj" : r ? "c-neutral-sf-02" : "c-tertiary-sf-02"
      }
    },
    neutral: {
      rootStyle: {
        color: t ? "c-neutral-obj" : "c-neutral-sf-02"
      }
    }
  }, W = {
    width: (p = (y = c[e]) == null ? void 0 : y.rootStyle) == null ? void 0 : p.width,
    height: (S = (m = c[e]) == null ? void 0 : m.rootStyle) == null ? void 0 : S.height,
    padding: (b = (f = c[e]) == null ? void 0 : f.rootStyle) == null ? void 0 : b.padding,
    alignItems: "ai-center",
    color: (x = (g = I[B]) == null ? void 0 : g.rootStyle) == null ? void 0 : x.color,
    opacity: o ? "oc-0.5" : "oc-1",
    borderStyle: "bs-none",
    borderRadius: (w = (R = h[i]) == null ? void 0 : R.rootStyle) == null ? void 0 : w.borderRadius,
    cursor: "cs-pointer"
    // focusStyle: {
    //   visibility: 'focus:hidden',
    // },
  }, E = {
    width: "w-[50%]",
    height: "h-full",
    color: "c-[#FFFFFF]",
    opacity: o ? "oc-0.5" : "oc-1",
    transformTranslateX: t ? "trlx-[100%]" : "trlx-0",
    borderRadius: (k = (j = h[i]) == null ? void 0 : j.thumbStyle) == null ? void 0 : k.borderRadius,
    cursor: "cs-pointer"
  }, M = H, X = G, u = () => {
    const F = !t;
    n(F), d && d(F);
  };
  return /* @__PURE__ */ q(
    M,
    {
      ...T(W, C || {}),
      noDefaultStyle: !0,
      onClick: u,
      "aria-checked": t,
      disabled: o,
      children: [
        /* @__PURE__ */ l(
          "input",
          {
            id: s,
            name: V,
            type: "checkbox",
            checked: t,
            onChange: u,
            disabled: o,
            className: "hidden",
            "aria-checked": t
          }
        ),
        /* @__PURE__ */ l(J, { width: "w-full", height: "h-full", children: /* @__PURE__ */ l(
          X,
          {
            id: s,
            ...T(E, D || {}),
            noDefaultStyle: !0,
            style: {
              transition: "transform 0.3s ease-in-out"
            }
          }
        ) })
      ]
    }
  );
};
export {
  Z as default
};
