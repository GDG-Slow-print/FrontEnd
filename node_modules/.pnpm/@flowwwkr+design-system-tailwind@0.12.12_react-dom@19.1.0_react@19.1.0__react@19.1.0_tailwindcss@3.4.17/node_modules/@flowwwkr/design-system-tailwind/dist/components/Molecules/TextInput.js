"use client";
import { jsx as H } from "react/jsx-runtime";
import { useState as ro } from "react";
import lo from "../Atoms/Flex.js";
import J from "../../utils/deepMerge.js";
import eo from "../Atoms/Input.js";
const ao = ({
  id: K,
  name: N,
  required: O,
  value: i,
  defaultValue: P,
  placeholder: Q,
  size: l = "md",
  color: c = "neutral",
  state: o = "default",
  theme: r = "outlined",
  onChange: n,
  rootStyle: U,
  inputStyle: Y,
  disabled: y
}) => {
  var a, f, S, p, b, s, m, g, h, w, j, C, x, V, X, I, R, W, v, D, F, L, M, T, k, q, A, B, E;
  const [Z, _] = ro(
    i || P || ""
  ), e = {
    sm: {
      rootStyle: {
        width: "w-24",
        height: "h-2.75",
        paddingX: "px-1"
      },
      inputStyle: { font: "f-1.5" }
    },
    md: {
      rootStyle: {
        width: "w-32",
        height: "h-4.25",
        paddingX: "px-1.5"
      },
      inputStyle: { font: "f-1.75" }
    },
    lg: {
      rootStyle: {
        width: "w-40",
        height: "h-4.5",
        paddingX: "px-1.5"
      },
      inputStyle: { font: "f-2" }
    }
  }, t = {
    error: {
      filled: {
        rootStyle: { color: "c-error-sf-01" },
        inputStyle: { color: "c-error-obj-01" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-error-mid" },
        inputStyle: { color: "c-error-mid" }
      }
    },
    warning: {
      filled: {
        rootStyle: { color: "c-warning-sf-01" },
        inputStyle: { color: "c-warning-obj-01" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-warning-mid" },
        inputStyle: { color: "c-warning-mid" }
      }
    },
    success: {
      filled: {
        rootStyle: { color: "c-success-sf-01" },
        inputStyle: { color: "c-success-obj-01" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-success-mid" },
        inputStyle: { color: "c-success-mid" }
      }
    },
    perfect: {
      filled: {
        rootStyle: { color: "c-perfect-sf-01" },
        inputStyle: { color: "c-perfect-obj-01" }
      },
      outlined: {
        rootStyle: { borderColor: "bc-perfect-mid" },
        inputStyle: { color: "c-perfect-mid" }
      }
    }
  }, d = {
    primary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-primary-sf-01" },
        inputStyle: { color: "c-primary-obj" }
      } : (a = t[o]) == null ? void 0 : a.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-primary-mid" },
        inputStyle: { color: "c-primary-obj" }
      } : (f = t[o]) == null ? void 0 : f.outlined
    },
    secondary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-secondary-sf-01" },
        inputStyle: { color: "c-secondary-obj" }
      } : (S = t[o]) == null ? void 0 : S.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-secondary-mid" },
        inputStyle: { color: "c-secondary-obj" }
      } : (p = t[o]) == null ? void 0 : p.outlined
    },
    tertiary: {
      filled: o === "default" ? {
        rootStyle: { color: "c-tertiary-sf-01" },
        inputStyle: { color: "c-tertiary-obj" }
      } : (b = t[o]) == null ? void 0 : b.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-tertiary-mid" },
        inputStyle: { color: "c-tertiary-obj" }
      } : (s = t[o]) == null ? void 0 : s.outlined
    },
    neutral: {
      filled: o === "default" ? {
        rootStyle: { color: "c-neutral-sf-01" },
        inputStyle: { color: "c-neutral-obj" }
      } : (m = t[o]) == null ? void 0 : m.filled,
      outlined: o === "default" ? {
        rootStyle: { borderColor: "bc-neutral-mid" },
        inputStyle: { color: "c-neutral-obj" }
      } : (g = t[o]) == null ? void 0 : g.outlined
    }
  }, u = {
    outlined: {
      rootStyle: {
        borderWidth: "bw-0.125",
        borderStyle: "bs-solid"
      }
    },
    filled: {}
  }, $ = lo, z = {
    position: "relative",
    width: (w = (h = e[l]) == null ? void 0 : h.rootStyle) == null ? void 0 : w.width,
    height: (C = (j = e[l]) == null ? void 0 : j.rootStyle) == null ? void 0 : C.height,
    paddingX: (V = (x = e[l]) == null ? void 0 : x.rootStyle) == null ? void 0 : V.paddingX,
    alignItems: "ai-center",
    alignContent: "ac-center",
    color: (R = (I = (X = d[c]) == null ? void 0 : X[r]) == null ? void 0 : I.rootStyle) == null ? void 0 : R.color,
    opacity: y ? "oc-0.5" : "oc-1",
    borderRadius: "rad-0.5",
    borderStyle: (v = (W = u[r]) == null ? void 0 : W.rootStyle) == null ? void 0 : v.borderStyle,
    borderWidth: (F = (D = u[r]) == null ? void 0 : D.rootStyle) == null ? void 0 : F.borderWidth,
    borderColor: (T = (M = (L = d[c]) == null ? void 0 : L[r]) == null ? void 0 : M.rootStyle) == null ? void 0 : T.borderColor
  }, oo = {
    width: "w-full",
    fontFamily: "ff-primary",
    font: (q = (k = e[l]) == null ? void 0 : k.inputStyle) == null ? void 0 : q.font,
    color: (E = (B = (A = d[c]) == null ? void 0 : A[r]) == null ? void 0 : B.inputStyle) == null ? void 0 : E.color
  }, to = (G) => {
    n ? n(G.target.value) : _(G.target.value);
  };
  return /* @__PURE__ */ H($, { ...J(z, U || {}), noDefaultStyle: !0, children: /* @__PURE__ */ H(
    eo,
    {
      id: K,
      type: "text",
      name: N,
      required: O,
      value: i !== void 0 ? i : Z,
      placeholder: Q,
      onChange: to,
      ...J(oo, Y || {}),
      disabled: y,
      noDefaultStyle: !0
    }
  ) });
};
export {
  ao as default
};
