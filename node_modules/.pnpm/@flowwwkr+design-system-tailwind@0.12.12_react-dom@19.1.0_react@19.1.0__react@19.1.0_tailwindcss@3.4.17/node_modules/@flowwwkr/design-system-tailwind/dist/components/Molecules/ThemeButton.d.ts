import { default as React, MouseEventHandler, TouchEvent } from 'react';
import { FlexStyleProps, TextStyleProps, WrapperStyleProps } from '../../types/props';
/**
 * Props for the **ThemeButton** component.
 */
export interface ThemeButtonProps {
    /**
     * The **id** attribute for the underlying `<button>` element.
     * Helps identify the button in tests or for accessibility.
     */
    id?: string;
    /**
     * The `type` of the `<button>` element.
     * Defaults to `'button'`.
     */
    type?: 'button' | 'submit';
    /**
     * The **size** variant of the button.
     * Affects height, icon size, font size, etc.
     * Defaults to `'md'`.
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * The **color** variant of the button (e.g., `'primary'`, `'neutral'`).
     * This determines the primary color token used.
     * Defaults to `'neutral'`.
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * The **state** variant of the button (e.g., `'error'`, `'success'`).
     * Determines additional color variants for feedback.
     * Defaults to `'default'`.
     */
    state?: 'default' | 'error' | 'warning' | 'success' | 'perfect';
    /**
     * The **theme** or style variant of the button.
     * `'filled' | 'outlined' | 'ghost'`.
     * Defaults to `'outlined'`.
     */
    theme?: 'filled' | 'outlined' | 'ghost';
    /**
     * When **true**, the button is visually and functionally disabled.
     * Defaults to `false`.
     */
    disabled?: boolean;
    /**
     * The **contents** of the button, typically text or an inline element.
     */
    children?: React.ReactNode;
    /**
     * A React node to be rendered as a **prefix icon** before the button text.
     */
    prefixIcon?: React.ReactNode;
    /**
     * A React node to be rendered as a **suffix icon** after the button text.
     */
    suffixIcon?: React.ReactNode;
    /**
     * **Style props** for the main `<Button>` wrapper.
     * Inherits from **FlexStyleProps**, controlling layout, spacing, color tokens, etc.
     */
    buttonStyle?: FlexStyleProps;
    /**
     * **Style props** for the prefix icon wrapper.
     * Inherits from **WrapperStyleProps**, controlling icon size, color tokens, etc.
     */
    prefixIconWrapperStyle?: WrapperStyleProps;
    /**
     * **Style props** for the text inside the button.
     * Inherits from **TextStyleProps**, controlling font size, color, etc.
     */
    textStyle?: TextStyleProps;
    /**
     * **Style props** for the suffix icon wrapper.
     * Inherits from **WrapperStyleProps**, controlling icon size, color tokens, etc.
     */
    suffixIconWrapperStyle?: WrapperStyleProps;
    /**
     * Callback function triggered when the button is clicked.
     *
     * @param {MouseEvent<HTMLButtonElement>} [event] - The DOM event object.
     */
    onClick?: MouseEventHandler<HTMLButtonElement>;
    /**
     * Callback function triggered when the button is touched.
     * @param {MouseEvent<HTMLButtonElement>} [event] - The DOM event object.
     * */
    onTouchStart?: (event?: TouchEvent<HTMLButtonElement>) => void;
    /**
     * Callback function triggered when the button is released.
     * @param {MouseEvent<HTMLButtonElement>} [event] - The DOM event object.
     * */
    onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void;
}
/**
 * The **ThemeButton** component is a versatile button control with configurable
 * size, color, state, theme, prefix/suffix icons, and custom style props.
 *
 * **Structure**:
 * ```tsx
 * <Button>
 *   <PrefixIconWrapper> {prefixIcon} </PrefixIconWrapper>
 *   <Text> {children} </Text>
 *   <SuffixIconWrapper> {suffixIcon} </SuffixIconWrapper>
 * </Button>
 * ```
 *
 * **Example**:
 * ```tsx
 * <ThemeButton
 *   size="lg"
 *   color="primary"
 *   state="error"
 *   theme="outlined"
 *   prefixIcon={<MyIcon />}
 *   onClick={() => console.log('clicked!')}
 * >
 *   Confirm
 * </ThemeButton>
 * ```
 *
 * @param {ThemeButtonProps} props - The props for configuring the ThemeButton.
 * @returns {JSX.Element} A styled button element with optional icons and text.
 */
declare const ThemeButton: ({ id, type, size, color, state, theme, children, prefixIcon, suffixIcon, onClick, onTouchStart, onTouchEnd, buttonStyle, prefixIconWrapperStyle, textStyle, suffixIconWrapperStyle, disabled, }: ThemeButtonProps) => import("react/jsx-runtime").JSX.Element;
export default ThemeButton;
