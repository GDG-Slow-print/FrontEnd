import { jsxs as ct, jsx as n } from "react/jsx-runtime";
import i from "../../utils/deepMerge.js";
import ut from "../Atoms/Button.js";
import yt from "../Atoms/Text.js";
import L from "../Atoms/Wrapper.js";
const mt = ({
  id: N,
  type: O = "button",
  size: r = "md",
  color: d = "neutral",
  state: t = "default",
  theme: e = "outlined",
  children: Q,
  prefixIcon: c,
  suffixIcon: u,
  onClick: U,
  onTouchStart: Y,
  onTouchEnd: Z,
  buttonStyle: _,
  prefixIconWrapperStyle: $,
  textStyle: tt,
  suffixIconWrapperStyle: ot,
  disabled: y
}) => {
  var S, a, s, m, p, h, g, x, z, C, I, w, W, j, X, B, D, V, T, k, v, P, A, F, M, R, q, E, G, H, J, K;
  const l = {
    sm: {
      buttonStyle: {
        height: "h-4",
        paddingX: "px-1.5"
      },
      prefixIconStyle: {
        size: "sz-2"
      },
      textStyle: {
        fontSize: "fs-1.75"
      },
      suffixIconStyle: {
        size: "sz-2"
      }
    },
    md: {
      buttonStyle: {
        height: "h-4.25",
        paddingX: "px-1.5"
      },
      prefixIconStyle: {
        size: "sz-2.25"
      },
      textStyle: {
        fontSize: "fs-2"
      },
      suffixIconStyle: {
        size: "sz-2.25"
      }
    },
    lg: {
      buttonStyle: {
        height: "h-4.5",
        paddingX: "px-1.5"
      },
      prefixIconStyle: {
        size: "sz-2.5"
      },
      textStyle: {
        fontSize: "fs-2.25"
      },
      suffixIconStyle: {
        size: "sz-2.5"
      }
    }
  }, o = {
    error: {
      filled: {
        buttonStyle: { color: "c-error-mid" }
      },
      outlined: {
        buttonStyle: {
          color: "c-error-mid",
          borderColor: "bc-error-mid"
        }
      },
      ghost: {
        buttonStyle: { color: "c-error-mid" }
      }
    },
    warning: {
      filled: {
        buttonStyle: { color: "c-warning-mid" }
      },
      outlined: {
        buttonStyle: {
          color: "c-warning-mid",
          borderColor: "bc-warning-mid"
        }
      },
      ghost: {
        buttonStyle: { color: "c-warning-mid" }
      }
    },
    success: {
      filled: {
        buttonStyle: { color: "c-success-mid" }
      },
      outlined: {
        buttonStyle: {
          color: "c-success-mid",
          borderColor: "bc-success-mid"
        }
      },
      ghost: {
        buttonStyle: { color: "c-success-mid" }
      }
    },
    perfect: {
      filled: {
        buttonStyle: { color: "c-perfect-mid" }
      },
      outlined: {
        buttonStyle: {
          color: "c-perfect-mid",
          borderColor: "bc-perfect-mid"
        }
      },
      ghost: {
        buttonStyle: { color: "c-perfect-mid" }
      }
    }
  }, f = {
    primary: {
      filled: t === "default" ? {
        buttonStyle: { color: "c-primary-mid" }
      } : (S = o[t]) == null ? void 0 : S.filled,
      outlined: t === "default" ? {
        buttonStyle: {
          color: "c-primary-mid",
          borderColor: "bc-primary-mid"
        }
      } : (a = o[t]) == null ? void 0 : a.outlined,
      ghost: t === "default" ? {
        buttonStyle: { color: "c-primary-mid" }
      } : (s = o[t]) == null ? void 0 : s.ghost
    },
    secondary: {
      filled: t === "default" ? {
        buttonStyle: { color: "c-secondary-mid" }
      } : (m = o[t]) == null ? void 0 : m.filled,
      outlined: t === "default" ? {
        buttonStyle: {
          color: "c-secondary-mid",
          borderColor: "bc-secondary-mid"
        }
      } : (p = o[t]) == null ? void 0 : p.outlined,
      ghost: t === "default" ? {
        buttonStyle: { color: "c-secondary-mid" }
      } : (h = o[t]) == null ? void 0 : h.ghost
    },
    tertiary: {
      filled: t === "default" ? {
        buttonStyle: { color: "c-tertiary-mid" }
      } : (g = o[t]) == null ? void 0 : g.filled,
      outlined: t === "default" ? {
        buttonStyle: {
          color: "c-tertiary-mid",
          borderColor: "bc-tertiary-mid"
        }
      } : (x = o[t]) == null ? void 0 : x.outlined,
      ghost: t === "default" ? {
        buttonStyle: { color: "c-tertiary-mid" }
      } : (z = o[t]) == null ? void 0 : z.ghost
    },
    neutral: {
      filled: t === "default" ? {
        buttonStyle: { color: "c-neutral-obj" }
      } : (C = o[t]) == null ? void 0 : C.filled,
      outlined: t === "default" ? {
        buttonStyle: {
          color: "c-neutral-obj",
          borderColor: "bc-neutral-mid"
        }
      } : (I = o[t]) == null ? void 0 : I.outlined,
      ghost: t === "default" ? {
        buttonStyle: { color: "c-neutral-obj" }
      } : (w = o[t]) == null ? void 0 : w.ghost
    }
  }, b = {
    filled: {},
    outlined: {
      buttonStyle: {
        borderWidth: "bw-0.125",
        borderStyle: "bs-solid"
      }
    },
    ghost: {}
  }, et = {
    position: "relative",
    width: "w-auto",
    height: (j = (W = l[r]) == null ? void 0 : W.buttonStyle) == null ? void 0 : j.height,
    paddingX: (B = (X = l[r]) == null ? void 0 : X.buttonStyle) == null ? void 0 : B.paddingX,
    justifyContent: "jc-center",
    alignItems: "ai-center",
    alignContent: "ac-center",
    gap: "g-0.5",
    color: (T = (V = (D = f[d]) == null ? void 0 : D[e]) == null ? void 0 : V.buttonStyle) == null ? void 0 : T.color,
    opacity: y ? "oc-0.5" : "oc-1",
    borderRadius: "rad-1",
    borderStyle: (v = (k = b[e]) == null ? void 0 : k.buttonStyle) == null ? void 0 : v.borderStyle,
    borderWidth: (A = (P = b[e]) == null ? void 0 : P.buttonStyle) == null ? void 0 : A.borderWidth,
    borderColor: (R = (M = (F = f[d]) == null ? void 0 : F[e]) == null ? void 0 : M.buttonStyle) == null ? void 0 : R.borderColor,
    transition: "trans-colors"
  }, rt = L, lt = {
    size: (E = (q = l[r]) == null ? void 0 : q.prefixIconStyle) == null ? void 0 : E.size,
    color: "c-inherit"
  }, it = {
    fontFamily: "ff-primary",
    fontSize: (H = (G = l[r]) == null ? void 0 : G.textStyle) == null ? void 0 : H.fontSize,
    color: "c-inherit",
    lineClamp: "lc-1",
    wordBreak: "break-words"
  }, nt = L, dt = {
    size: (K = (J = l[r]) == null ? void 0 : J.suffixIconStyle) == null ? void 0 : K.size,
    color: "c-inherit"
  };
  return /* @__PURE__ */ ct(
    ut,
    {
      id: N,
      type: O,
      theme: e === "outlined" ? "ghost" : e,
      ...i(et, _ || {}),
      onClick: U,
      htmlAttributes: {
        onTouchStart: Y,
        onTouchEnd: Z
      },
      disabled: y,
      noDefaultStyle: !0,
      hover: !0,
      children: [
        c && /* @__PURE__ */ n(
          rt,
          {
            ...i(
              lt,
              $ || {}
            ),
            noDefaultStyle: !0,
            children: c
          }
        ),
        /* @__PURE__ */ n(yt, { ...i(it, tt || {}), noDefaultStyle: !0, children: Q }),
        u && /* @__PURE__ */ n(
          nt,
          {
            ...i(
              dt,
              ot || {}
            ),
            noDefaultStyle: !0,
            children: u
          }
        )
      ]
    }
  );
};
export {
  mt as default
};
