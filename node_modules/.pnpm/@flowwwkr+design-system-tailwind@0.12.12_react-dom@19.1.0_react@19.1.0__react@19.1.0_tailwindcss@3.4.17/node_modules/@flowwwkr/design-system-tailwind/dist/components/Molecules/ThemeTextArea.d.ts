import { FlexStyleProps, TextareaStyleProps } from '../../types/props';
/**
 * ThemeTextAreaProps - Interface describing the props for a themed textarea component.
 */
interface ThemeTextAreaProps {
    /**
     * The HTML `id` attribute for the textarea element.
     * This can be used to associate a label with the textarea or reference it in tests.
     */
    id?: string;
    /**
     * The HTML `name` attribute for the textarea element.
     * Commonly used when submitting form data.
     */
    name?: string;
    /**
     * The number of visible text lines for the textarea.
     * This attribute is a hint to browsers how tall the textarea should be.
     */
    rows?: number;
    /**
     * The visible width of the textarea.
     * Typically, modern designs rely more on responsive styling than this property.
     */
    cols?: number;
    /**
     * The maximum number of characters a user can enter.
     * If specified, users cannot enter more than `maxLength` characters.
     */
    maxLength?: number;
    /**
     * Controlled value of the textarea.
     * If defined, `onChange` must be used to update the value for user input.
     */
    value?: string;
    /**
     * Uncontrolled initial value for the textarea.
     * Useful for setting a default text without fully controlling the component.
     */
    defaultValue?: string;
    /**
     * Placeholder text displayed when the textarea is empty.
     */
    placeholder?: string;
    /**
     * Marks the textarea as required in a form.
     * Form validation fails if this field is empty.
     */
    required?: boolean;
    /**
     * If `true`, the component automatically resizes based on text content.
     * This uses the scrollHeight of the element to adjust its own height.
     */
    autoSize?: boolean;
    /**
     * Defines how the user can resize the textarea.
     * @default 'both'
     */
    resize?: 'none' | 'vertical' | 'horizontal' | 'both';
    /**
     * Predefined size of the textarea styling.
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * Predefined color scheme for the textarea.
     * @default 'neutral'
     */
    color?: 'primary' | 'secondary' | 'tertiary' | 'neutral';
    /**
     * Visual state of the textarea to indicate different statuses.
     * @default 'default'
     */
    state?: 'default' | 'error' | 'warning' | 'success' | 'perfect';
    /**
     * The theme style of the textarea.
     * @default 'outlined'
     */
    theme?: 'filled' | 'outlined' | 'ghost';
    /**
     * If `true`, the textarea is disabled and cannot be edited.
     */
    disabled?: boolean;
    /**
     * Style overrides for the container (Flex) that wraps the textarea.
     * Use this to add or override style tokens for layout, spacing, etc.
     */
    rootStyle?: FlexStyleProps;
    /**
     * Style overrides specifically for the textarea element.
     * Use this to add or override style tokens for typography, sizing, etc.
     */
    textareaStyle?: TextareaStyleProps;
    /**
     * Callback fired when the value changes.
     * Provides the updated string value from the textarea.
     *
     * @param value - The new string value of the textarea
     */
    onChange?: (value: string) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
}
/**
 * ThemeTextArea - A styled textarea component with flexible size, color, and theme variants.
 * Allows optional auto-resizing based on content.

 * **Structure**:
 * ```tsx
 * <Root>
 *   <Textarea />
 * </Root>
 * ```
 *
 * @component
 * @example
 * return (
 *   <ThemeTextArea
 *     size="lg"
 *     color="primary"
 *     theme="outlined"
 *     autoSize
 *     placeholder="Enter your text here..."
 *     onChange={(value) => console.log(value)}
 *   />
 * );
 *
 * /**
 * **Props**:
 * @property {string} [id] - The HTML `id` attribute of the textarea.
 * @property {string} [name] - The HTML `name` attribute of the textarea.
 * @property {number} [rows] - The number of visible text lines for the textarea.
 * @property {number} [cols] - The visible width of the textarea.
 * @property {number} [maxLength] - The maximum number of characters the user can enter.
 * @property {string} [value] - Controlled value for the textarea.
 * @property {string} [defaultValue] - Uncontrolled initial value for the textarea.
 * @property {string} [placeholder] - Placeholder text when the textarea is empty.
 * @property {boolean} [required] - Whether the textarea is a required field.
 * @property {boolean} [autoSize] - If `true`, automatically resize the textarea based on content.
 * @property {'none' | 'vertical' | 'horizontal' | 'both'} [resize='both'] - How the textarea can be resized.
 * @property {'sm' | 'md' | 'lg'} [size='md'] - Predefined size variant.
 * @property {'primary' | 'secondary' | 'tertiary' | 'neutral'} [color='neutral'] - Predefined color variant.
 * @property {'default' | 'error' | 'warning' | 'success' | 'perfect'} [state='default'] - Visual state indication.
 * @property {'filled' | 'outlined' | 'ghost'} [theme='outlined'] - Style theme type.
 * @property {boolean} [disabled] - Disables the textarea if `true`.
 * @property {FlexStyleProps} [rootStyle] - Custom style overrides for the root Flex container.
 * @property {TextareaStyleProps} [textareaStyle] - Custom style overrides for the textarea element.
 * @property {(value: string) => void} [onChange] - Callback fired when the textarea value changes.
 */
declare const ThemeTextArea: ({ id, name, rows, cols, maxLength, required, value, defaultValue, placeholder, autoSize, resize, size, color, state, theme, onChange, onKeyDown, rootStyle, textareaStyle, disabled, }: ThemeTextAreaProps) => import("react/jsx-runtime").JSX.Element;
export default ThemeTextArea;
