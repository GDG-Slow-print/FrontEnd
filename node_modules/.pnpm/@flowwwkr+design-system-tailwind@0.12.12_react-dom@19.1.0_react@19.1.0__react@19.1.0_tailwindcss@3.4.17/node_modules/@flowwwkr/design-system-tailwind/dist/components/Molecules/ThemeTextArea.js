"use client";
import { jsx as _ } from "react/jsx-runtime";
import { useRef as gr, useState as mr, useEffect as Cr } from "react";
import Br from "../Atoms/Flex.js";
import rr from "../../utils/deepMerge.js";
import wr from "../Atoms/TextareaWithRef.js";
const Yr = ({
  id: or,
  name: er,
  rows: tr,
  cols: lr,
  maxLength: ar,
  required: cr,
  value: c,
  defaultValue: ir,
  placeholder: sr,
  autoSize: d = !1,
  resize: dr = "both",
  size: o,
  color: i = "neutral",
  state: r = "default",
  theme: e = "outlined",
  onChange: n,
  onKeyDown: nr,
  rootStyle: yr,
  textareaStyle: fr,
  disabled: y
}) => {
  var u, b, h, p, x, g, m, C, B, w, j, V, H, R, X, Y, T, W, v, z, D, F, L, A, E, I, M, $, k, q, G, J, K, N, O, P, Q, U;
  const l = gr(null), [f, Sr] = mr(
    c || ir || ""
  ), a = {
    sm: {
      rootStyle: {
        width: "w-24",
        paddingY: "py-0.75",
        paddingX: "px-1"
      },
      textareaStyle: { height: "h-4", minHeight: "mh-4", font: "f-1.5" }
    },
    md: {
      rootStyle: {
        width: "w-32",
        paddingY: "py-1",
        paddingX: "px-1.5"
      },
      textareaStyle: { height: "h-5", minHeight: "mh-5", font: "f-1.75" }
    },
    lg: {
      rootStyle: {
        width: "w-40",
        paddingY: "py-1",
        paddingX: "px-1.5"
      },
      textareaStyle: { height: "h-6", minHeight: "mh-6", font: "f-2" }
    }
  }, ur = {
    none: {
      textareaStyle: { resize: "resize-none" }
    },
    vertical: {
      textareaStyle: { resize: "resize-y" }
    },
    horizontal: {
      textareaStyle: { resize: "resize-x" }
    },
    both: {
      textareaStyle: { resize: "resize" }
    }
  }, t = {
    error: {
      filled: {
        rootStyle: { color: "c-error-sf-01" },
        textareaStyle: {
          color: "c-error-obj-01",
          scrollBarColor: "sbc-error-sf-02"
        }
      },
      outlined: {
        rootStyle: { borderColor: "bc-error-mid" },
        textareaStyle: {
          color: "c-error-mid",
          scrollBarColor: "sbc-error-sf-02"
        }
      }
    },
    warning: {
      filled: {
        rootStyle: { color: "c-warning-sf-01" },
        textareaStyle: {
          color: "c-warning-obj-01",
          scrollBarColor: "sbc-warning-sf-02"
        }
      },
      outlined: {
        rootStyle: { borderColor: "bc-warning-mid" },
        textareaStyle: {
          color: "c-warning-mid",
          scrollBarColor: "sbc-warning-sf-02"
        }
      }
    },
    success: {
      filled: {
        rootStyle: { color: "c-success-sf-01" },
        textareaStyle: {
          color: "c-success-obj-01",
          scrollBarColor: "sbc-success-sf-02"
        }
      },
      outlined: {
        rootStyle: { borderColor: "bc-success-mid" },
        textareaStyle: {
          color: "c-success-mid",
          scrollBarColor: "sbc-success-sf-02"
        }
      }
    },
    perfect: {
      filled: {
        rootStyle: { color: "c-perfect-sf-01" },
        textareaStyle: {
          color: "c-perfect-obj-01",
          scrollBarColor: "sbc-perfect-sf-02"
        }
      },
      outlined: {
        rootStyle: { borderColor: "bc-perfect-mid" },
        textareaStyle: {
          color: "c-perfect-mid",
          scrollBarColor: "sbc-perfect-sf-02"
        }
      }
    }
  }, s = {
    primary: {
      filled: r === "default" ? {
        rootStyle: { color: "c-primary-sf-01" },
        textareaStyle: {
          color: "c-primary-obj",
          scrollBarColor: "sbc-primary-sf-02"
        }
      } : (u = t[r]) == null ? void 0 : u.filled,
      outlined: r === "default" ? {
        rootStyle: { borderColor: "bc-primary-mid" },
        textareaStyle: {
          color: "c-primary-obj",
          scrollBarColor: "sbc-primary-sf-02"
        }
      } : (b = t[r]) == null ? void 0 : b.outlined
    },
    secondary: {
      filled: r === "default" ? {
        rootStyle: { color: "c-secondary-sf-01" },
        textareaStyle: {
          color: "c-secondary-obj",
          scrollBarColor: "sbc-secondary-sf-02"
        }
      } : (h = t[r]) == null ? void 0 : h.filled,
      outlined: r === "default" ? {
        rootStyle: { borderColor: "bc-secondary-mid" },
        textareaStyle: {
          color: "c-secondary-obj",
          scrollBarColor: "sbc-secondary-sf-02"
        }
      } : (p = t[r]) == null ? void 0 : p.outlined
    },
    tertiary: {
      filled: r === "default" ? {
        rootStyle: { color: "c-tertiary-sf-01" },
        textareaStyle: {
          color: "c-tertiary-obj",
          scrollBarColor: "sbc-tertiary-sf-02"
        }
      } : (x = t[r]) == null ? void 0 : x.filled,
      outlined: r === "default" ? {
        rootStyle: { borderColor: "bc-tertiary-mid" },
        textareaStyle: {
          color: "c-tertiary-obj",
          scrollBarColor: "sbc-tertiary-sf-02"
        }
      } : (g = t[r]) == null ? void 0 : g.outlined
    },
    neutral: {
      filled: r === "default" ? {
        rootStyle: { color: "c-neutral-sf-01" },
        textareaStyle: {
          color: "c-neutral-obj",
          scrollBarColor: "sbc-neutral-sf-02"
        }
      } : (m = t[r]) == null ? void 0 : m.filled,
      outlined: r === "default" ? {
        rootStyle: { borderColor: "bc-neutral-mid" },
        textareaStyle: {
          color: "c-neutral-obj",
          scrollBarColor: "sbc-neutral-sf-02"
        }
      } : (C = t[r]) == null ? void 0 : C.outlined
    }
  }, S = {
    outlined: {
      rootStyle: {
        borderWidth: "bw-0.125",
        borderStyle: "bs-solid"
      }
    },
    filled: {},
    ghost: {
      rootStyle: {
        color: "c-neutral-sf"
      },
      textareaStyle: {
        color: "c-neutral-obj",
        scrollBarColor: "sbc-neutral-sf-02"
      }
    }
  }, br = Br, hr = {
    position: "relative",
    width: o && ((w = (B = a[o]) == null ? void 0 : B.rootStyle) == null ? void 0 : w.width),
    height: "h-auto",
    paddingX: o && ((V = (j = a[o]) == null ? void 0 : j.rootStyle) == null ? void 0 : V.paddingX),
    paddingY: o && ((R = (H = a[o]) == null ? void 0 : H.rootStyle) == null ? void 0 : R.paddingY),
    alignItems: "ai-center",
    alignContent: "ac-center",
    color: (T = (Y = (X = s[i]) == null ? void 0 : X[e]) == null ? void 0 : Y.rootStyle) == null ? void 0 : T.color,
    opacity: y ? "oc-0.5" : "oc-1",
    borderRadius: "rad-0.5",
    borderStyle: (v = (W = S[e]) == null ? void 0 : W.rootStyle) == null ? void 0 : v.borderStyle,
    borderWidth: (D = (z = S[e]) == null ? void 0 : z.rootStyle) == null ? void 0 : D.borderWidth,
    borderColor: (A = (L = (F = s[i]) == null ? void 0 : F[e]) == null ? void 0 : L.rootStyle) == null ? void 0 : A.borderColor
  }, pr = {
    width: "w-full",
    height: o && ((I = (E = a[o]) == null ? void 0 : E.textareaStyle) == null ? void 0 : I.height),
    minHeight: o && (($ = (M = a[o]) == null ? void 0 : M.textareaStyle) == null ? void 0 : $.minHeight),
    fontFamily: "ff-primary",
    font: o ? (q = (k = a[o]) == null ? void 0 : k.textareaStyle) == null ? void 0 : q.font : "f-1.75",
    color: e === "ghost" ? "c-neutral-obj" : (K = (J = (G = s[i]) == null ? void 0 : G[e]) == null ? void 0 : J.textareaStyle) == null ? void 0 : K.color,
    scrollBar: "scr-visible",
    scrollBarSize: "sbs-1",
    scrollBarColor: e === "ghost" ? "sbc-neutral-sf-02" : (P = (O = (N = s[i]) == null ? void 0 : N[e]) == null ? void 0 : O.textareaStyle) == null ? void 0 : P.scrollBarColor,
    resize: (U = (Q = ur[dr]) == null ? void 0 : Q.textareaStyle) == null ? void 0 : U.resize
  };
  Cr(() => {
    d && l.current && (l.current.style.height = "auto", l.current.style.height = `${l.current.scrollHeight}px`);
  }, [d, l, c, f]);
  const xr = (Z) => {
    n ? n(Z.target.value) : Sr(Z.target.value);
  };
  return /* @__PURE__ */ _(br, { ...rr(hr, yr || {}), noDefaultStyle: !0, children: /* @__PURE__ */ _(
    wr,
    {
      ref: l,
      id: or,
      name: er,
      required: cr,
      rows: tr,
      cols: lr,
      maxLength: ar,
      value: c !== void 0 ? c : f,
      placeholder: sr,
      onChange: xr,
      onKeyDown: nr,
      ...rr(pr, fr || {}),
      disabled: y,
      noDefaultStyle: !0
    }
  ) });
};
export {
  Yr as default
};
