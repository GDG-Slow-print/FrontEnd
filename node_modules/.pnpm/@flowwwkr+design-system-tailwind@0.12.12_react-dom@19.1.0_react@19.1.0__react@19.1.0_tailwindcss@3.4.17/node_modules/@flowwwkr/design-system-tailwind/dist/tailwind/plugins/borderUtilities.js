import $ from "tailwindcss/plugin";
import { linearGradientTheme as m, borderTypeTheme as u, opacityTheme as H, borderWidthTheme as x, borderRadiusTheme as A } from "../themes/index.js";
import { hexToHsla as e, hslaToHex as k } from "../../utils/color-converter.js";
const j = $(function({ matchUtilities: n, theme: y }) {
  n(
    {
      blg: (r) => ({
        borderColor: "transparent",
        backgroundImage: `var(--flowww-bg), linear-gradient(${r}, var(--flowww-border-gradient-stops))`,
        backgroundOrigin: "border-box",
        backgroundClip: "padding-box, border-box"
      })
    },
    {
      values: m
    }
  ), n(
    {
      bs: (r) => ({
        "border-style": r
      }),
      bts: (r) => ({
        "border-top-style": r
      }),
      brs: (r) => ({
        "border-right-style": r
      }),
      bbs: (r) => ({
        "border-bottom-style": r
      }),
      bls: (r) => ({
        "border-left-style": r
      })
    },
    {
      values: u
    }
  ), n(
    {
      bc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "--flowww-border-opacity": "100%",
            "border-color": r.light.surface,
            '&:is([data-theme="dark"] *)': {
              "border-color": r.dark.surface
            }
          };
        let o = "#fff", t = "#000";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h, s: w, l: g, a: S } = e(r), p = k(h, w, 100 - g, S);
          o = r, t = p;
        } else
          o = r.light.surface, t = r.dark.surface;
        const {
          h: a,
          s: d,
          l: f,
          a: i
        } = e(o), {
          h: c,
          s,
          l: b,
          a: l
        } = e(t);
        return {
          "--flowww-border-opacity": "100%",
          "border-color": `hsla(${a}, ${d}%, ${f}%, calc(var(--flowww-border-opacity) * ${i}))`,
          '&:is([data-theme="dark"] *)': {
            "border-color": `hsla(${c}, ${s}%, ${b}%, calc(var(--flowww-border-opacity) * ${l}))`
          }
        };
      },
      btc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "--flowww-border-top-opacity": "100%",
            "border-top-color": r.light.surface,
            '&:is([data-theme="dark"] *)': {
              "border-top-color": r.dark.surface
            }
          };
        let o = "#fff", t = "#000";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h, s: w, l: g, a: S } = e(r), p = k(h, w, 100 - g, S);
          o = r, t = p;
        } else
          o = r.light.surface, t = r.dark.surface;
        const {
          h: a,
          s: d,
          l: f,
          a: i
        } = e(o), {
          h: c,
          s,
          l: b,
          a: l
        } = e(t);
        return {
          "--flowww-border-top-opacity": "100%",
          "border-top-color": `hsla(${a}, ${d}%, ${f}%, calc(var(--flowww-border-opacity) * ${i}))`,
          '&:is([data-theme="dark"] *)': {
            "border-top-color": `hsla(${c}, ${s}%, ${b}%, calc(var(--flowww-border-opacity) * ${l}))`
          }
        };
      },
      brc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "--flowww-border-right-opacity": "100%",
            "border-right-color": r.light.surface,
            '&:is([data-theme="dark"] *)': {
              "border-right-color": r.dark.surface
            }
          };
        let o = "#fff", t = "#000";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h, s: w, l: g, a: S } = e(r), p = k(h, w, 100 - g, S);
          o = r, t = p;
        } else
          o = r.light.surface, t = r.dark.surface;
        const {
          h: a,
          s: d,
          l: f,
          a: i
        } = e(o), {
          h: c,
          s,
          l: b,
          a: l
        } = e(t);
        return {
          "--flowww-border-right-opacity": "100%",
          "border-right-color": `hsla(${a}, ${d}%, ${f}%, calc(var(--flowww-border-opacity) * ${i}))`,
          '&:is([data-theme="dark"] *)': {
            "border-right-color": `hsla(${c}, ${s}%, ${b}%, calc(var(--flowww-border-opacity) * ${l}))`
          }
        };
      },
      bbc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "--flowww-border-bottom-opacity": "100%",
            "border-bottom-color": r.light.surface,
            '&:is([data-theme="dark"] *)': {
              "border-bottom-color": r.dark.surface
            }
          };
        let o = "#fff", t = "#000";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h, s: w, l: g, a: S } = e(r), p = k(h, w, 100 - g, S);
          o = r, t = p;
        } else
          o = r.light.surface, t = r.dark.surface;
        const {
          h: a,
          s: d,
          l: f,
          a: i
        } = e(o), {
          h: c,
          s,
          l: b,
          a: l
        } = e(t);
        return {
          "--flowww-border-bottom-opacity": "100%",
          "border-bottom-color": `hsla(${a}, ${d}%, ${f}%, calc(var(--flowww-border-opacity) * ${i}))`,
          '&:is([data-theme="dark"] *)': {
            "border-bottom-color": `hsla(${c}, ${s}%, ${b}%, calc(var(--flowww-border-opacity) * ${l}))`
          }
        };
      },
      blc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "--flowww-border-left-opacity": "100%",
            "border-left-color": r.light.surface,
            '&:is([data-theme="dark"] *)': {
              "border-left-color": r.dark.surface
            }
          };
        let o = "#fff", t = "#000";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h, s: w, l: g, a: S } = e(r), p = k(h, w, 100 - g, S);
          o = r, t = p;
        } else
          o = r.light.surface, t = r.dark.surface;
        const {
          h: a,
          s: d,
          l: f,
          a: i
        } = e(o), {
          h: c,
          s,
          l: b,
          a: l
        } = e(t);
        return {
          "--flowww-border-left-opacity": "100%",
          "border-left-color": `hsla(${a}, ${d}%, ${f}%, calc(var(--flowww-border-opacity) * ${i}))`,
          '&:is([data-theme="dark"] *)': {
            "border-left-color": `hsla(${c}, ${s}%, ${b}%, calc(var(--flowww-border-opacity) * ${l}))`
          }
        };
      }
    },
    {
      values: y("colors")
    }
  ), n(
    {
      bco: (r) => ({
        "--flowww-border-opacity": r
      }),
      btco: (r) => ({
        "--flowww-border-top-opacity": r
      }),
      brco: (r) => ({
        "--flowww-border-right-opacity": r
      }),
      bbco: (r) => ({
        "--flowww-border-bottom-opacity": r
      }),
      blco: (r) => ({
        "--flowww-border-left-opacity": r
      })
    },
    {
      values: H
    }
  ), n(
    {
      bw: (r) => ({
        "border-width": r
      }),
      btw: (r) => ({
        "border-top-width": r
      }),
      brw: (r) => ({
        "border-right-width": r
      }),
      bbw: (r) => ({
        "border-bottom-width": r
      }),
      blw: (r) => ({
        "border-left-width": r
      })
    },
    {
      values: x
    }
  ), n(
    {
      rad: (r) => ({
        "border-radius": r
      }),
      "rad-t": (r) => ({
        "border-top-left-radius": r,
        "border-top-right-radius": r
      }),
      "rad-r": (r) => ({
        "border-top-right-radius": r,
        "border-bottom-right-radius": r
      }),
      "rad-b": (r) => ({
        "border-bottom-right-radius": r,
        "border-bottom-left-radius": r
      }),
      "rad-l": (r) => ({
        "border-top-left-radius": r,
        "border-bottom-left-radius": r
      }),
      "rad-tl": (r) => ({
        "border-top-left-radius": r
      }),
      "rad-tr": (r) => ({
        "border-top-right-radius": r
      }),
      "rad-br": (r) => ({
        "border-bottom-right-radius": r
      }),
      "rad-bl": (r) => ({
        "border-bottom-left-radius": r
      })
    },
    {
      values: A
    }
  );
});
export {
  j as borderUtilities
};
