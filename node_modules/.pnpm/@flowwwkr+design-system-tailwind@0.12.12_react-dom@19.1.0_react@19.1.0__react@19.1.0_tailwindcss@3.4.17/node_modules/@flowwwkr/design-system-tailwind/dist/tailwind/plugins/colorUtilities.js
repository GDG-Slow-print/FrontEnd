import I from "tailwindcss/plugin";
import { linearGradientTheme as E, opacityTheme as G } from "../themes/index.js";
import { hexToHsla as $, hslaToHex as A } from "../../utils/color-converter.js";
const D = I(function({ theme: L, matchUtilities: H }) {
  H(
    {
      lg: (o) => ({
        backgroundImage: `linear-gradient(${o}, var(--flowww-gradient-stops))`,
        "--flowww-bg": `linear-gradient(${o}, var(--flowww-gradient-stops))`,
        "&.text, &.btn-text": {
          backgroundClip: "text",
          "-webkit-background-clip": "text",
          color: "transparent"
        }
      })
    },
    {
      values: E
    }
  ), H(
    {
      c: (o) => {
        if (typeof o == "object" && o.light.surface === "inherit") {
          const {
            h: S,
            s: O,
            l: e,
            a: x
          } = $(o.light.object), {
            h: m,
            s: W,
            l: v,
            a: T
          } = $(o.dark.object);
          return {
            "--flowww-bg-opacity": "100%",
            color: "inherit",
            backgroundColor: o.light.surface,
            "--flowww-bg": "linear-gradient(rgb(255 255 255 / var(--flowww-bg-opacity)), rgb(255 255 255 / var(--flowww-bg-opacity)))",
            "&.plain": {
              "--flowww-color-opacity": "100%",
              color: o.light.surface,
              backgroundColor: "transparent"
            },
            "&.outlined": {
              color: o.light.surface,
              backgroundColor: o.light.object,
              borderWidth: "1px",
              borderStyle: "solid",
              borderColor: o.light.surface,
              "--flowww-bg": "linear-gradient(rgb(255 255 255 / 0), rgb(255 255 255 / 0))"
            },
            "&.ghost": {
              color: o.light.surface,
              backgroundColor: o.light.object,
              "--flowww-bg": "linear-gradient(rgb(255 255 255 / 0), rgb(255 255 255 / 0))"
            },
            "&.hover:hover": {
              backgroundColor: o.light.surface,
              "&.plain": {
                color: o.light.surface,
                backgroundColor: "transparent"
              },
              "&.outlined, &.ghost": {
                backgroundColor: `hsla(${S}, ${O}%, ${e > 50 ? e - 10 : e + 10}%, ${x})`
              }
            },
            '&:is([data-theme="dark"] *)': {
              "--flowww-bg-opacity": "100%",
              color: "inherit",
              backgroundColor: o.dark.surface,
              "--flowww-bg": "linear-gradient(rgb(0 0 0 / var(--flowww-bg-opacity)), rgb(0 0 0 / var(--flowww-bg-opacity)))",
              "&.plain": {
                "--flowww-color-opacity": "100%",
                color: o.dark.surface,
                backgroundColor: "transparent"
              },
              "&.outlined": {
                color: o.dark.surface,
                backgroundColor: o.dark.object,
                borderWidth: "1px",
                borderStyle: "solid",
                borderColor: o.dark.surface,
                "--flowww-bg": "linear-gradient(rgb(0 0 0 / 0), rgb(0 0 0 / 0))"
              },
              "&.ghost": {
                color: o.dark.surface,
                backgroundColor: o.dark.object,
                "--flowww-bg": "linear-gradient(rgb(0 0 0 / 0), rgb(0 0 0 / 0))"
              },
              "&.hover:hover": {
                backgroundColor: o.dark.surface,
                "&.plain": {
                  backgroundColor: "transparent",
                  color: o.dark.surface
                },
                "&.outlined, &.ghost": {
                  backgroundColor: `hsla(${m}, ${W}%, ${v > 50 ? v - 10 : v + 10}%, ${T})`
                }
              }
            }
          };
        }
        let f = "#fff", s = "#000", h = "#000", d = "#fff";
        if (typeof o == "string" && o.startsWith("#")) {
          const { h: S, s: O, l: e, a: x } = $(o), m = A(S, O, e > 50 ? 10 : 95, x), W = A(S, O, 100 - e, x), v = A(S, O, e >= 50 ? 95 : 10, x);
          f = o, s = m, h = W, d = v;
        } else
          f = o.light.surface, s = o.light.object, h = o.dark.surface, d = o.dark.object;
        if (typeof f != "string" || typeof h != "string" || typeof s != "string" || typeof d != "string" || !f.startsWith("#") || !h.startsWith("#") || !s.startsWith("#") || !d.startsWith("#"))
          throw new Error("Invalid surface color");
        const {
          h: l,
          s: t,
          l: r,
          a: c
        } = $(f), {
          h: p,
          s: k,
          l: b,
          a: y
        } = $(s), {
          h: w,
          s: i,
          l: a,
          a: g
        } = $(h), {
          h: u,
          s: C,
          l: n,
          a: j
        } = $(d);
        return {
          "--flowww-bg-opacity": "100%",
          color: s,
          backgroundColor: `hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c}))`,
          "--flowww-bg": `linear-gradient(hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c})), hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c})))`,
          "&.plain": {
            "--flowww-color-opacity": "100%",
            color: `hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c}))`,
            backgroundColor: "transparent"
          },
          "&.outlined": {
            color: `hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c}))`,
            backgroundColor: "transparent",
            borderWidth: "1px",
            borderStyle: "solid",
            borderColor: `hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c}))`,
            "--flowww-bg": `linear-gradient(hsla(${p}, ${k}%, ${b}%, calc(var(--flowww-bg-opacity) * ${y})), hsla(${p}, ${k}%, ${b}%, calc(var(--flowww-bg-opacity) * ${y})))`
          },
          "&.ghost": {
            color: `hsla(${l}, ${t}%, ${r}%, calc(var(--flowww-bg-opacity) * ${c}))`,
            backgroundColor: "transparent",
            "--flowww-bg": `linear-gradient(hsla(${p}, ${k}%, ${b}%, calc(var(--flowww-bg-opacity) * ${y})), hsla(${p}, ${k}%, ${b}%, calc(var(--flowww-bg-opacity) * ${y})))`
          },
          "&.hover:hover": {
            backgroundColor: `hsla(${l}, ${t}%, ${r > 50 ? r - 10 : r + 10}%, calc(var(--flowww-bg-opacity) * ${c}))`,
            "&.plain": {
              color: `hsla(${l}, ${t}%, ${r > 50 ? r - 10 : r + 10}%, calc(var(--flowww-bg-opacity) * ${c}))`,
              backgroundColor: "transparent"
            },
            "&.outlined, &.ghost": {
              backgroundColor: `hsla(${p}, ${k}%, ${b > 50 ? b - 10 : b + 10}%, calc(var(--flowww-bg-opacity) * ${y}))`
            }
          },
          '&:is([data-theme="dark"] *)': {
            "--flowww-bg-opacity": "100%",
            color: d,
            backgroundColor: `hsla(${w}, ${i}%, ${a}%, calc(var(--flowww-bg-opacity) * ${g}))`,
            "--flowww-bg": `linear-gradient(hsla(${w}, ${i}%, ${a}%, calc(var(--flowww-bg-opacity) * ${g})), hsla(${w}, ${i}, ${a}, calc(var(--flowww-bg-opacity) * ${g})))`,
            "&.plain": {
              "--flowww-color-opacity": "100%",
              color: `hsla(${w}, ${i}%, ${a}%, calc(var(--flowww-bg-opacity) * ${g}))`,
              backgroundColor: "transparent"
            },
            "&.outlined": {
              color: `hsla(${w}, ${i}%, ${a}%, calc(var(--flowww-bg-opacity) * ${g}))`,
              backgroundColor: "transparent",
              borderWidth: "1px",
              borderStyle: "solid",
              borderColor: `hsla(${w}, ${i}, ${a}, calc(var(--flowww-bg-opacity) * ${g}))`,
              "--flowww-bg": `linear-gradient(hsla(${u}, ${C}%, ${n}%, calc(var(--flowww-bg-opacity) * ${j})), hsla(${u}, ${C}%, ${n}%, calc(var(--flowww-bg-opacity) * ${j})))`
            },
            "&.ghost": {
              color: `hsla(${w}, ${i}%, ${a}%, calc(var(--flowww-bg-opacity) * ${g}))`,
              backgroundColor: "transparent",
              "--flowww-bg": `linear-gradient(hsla(${u}, ${C}%, ${n}%, calc(var(--flowww-bg-opacity) * ${j})), hsla(${u}, ${C}%, ${n}%, calc(var(--flowww-bg-opacity) * ${j})))`
            },
            "&.hover:hover": {
              backgroundColor: `hsla(${w}, ${i}%, ${a > 50 ? a - 10 : a + 10}%, calc(var(--flowww-bg-opacity) * ${g}))`,
              "&.plain": {
                color: `hsla(${w}, ${i}%, ${a > 50 ? a - 10 : a + 10}%, calc(var(--flowww-bg-opacity) * ${g}))`,
                backgroundColor: "transparent"
              },
              "&.outlined, &.ghost": {
                backgroundColor: `hsla(${u}, ${C}%, ${n > 50 ? n - 10 : n + 10}%, calc(var(--flowww-bg-opacity) * ${j}))`
              }
            }
          }
        };
      }
    },
    {
      values: L("colors")
    }
  ), H(
    {
      co: (o) => ({
        "--flowww-bg-opacity": o,
        "&.text, &.svg, &.btn-text": {
          "--flowww-color-opacity": o
        },
        "&.btn-outlined": {
          "--flowww-color-opacity": o
        }
      })
    },
    {
      values: G
    }
  );
});
export {
  D as colorUtilities
};
