import { gridTemplateTrackTheme as t, gridTrackMinMaxTheme as o, gridSpanTheme as l, gridLineTheme as a, gapTheme as n } from "../themes/index.js";
import s from "tailwindcss/plugin";
const i = s(function({ addUtilities: m, matchUtilities: e }) {
  m({
    ".pc-start": {
      "place-content": "start"
    },
    ".pc-end": {
      "place-content": "end"
    },
    ".pc-center": {
      "place-content": "center"
    },
    ".pc-stretch": {
      "place-content": "stretch"
    },
    ".pc-around": {
      "place-content": "space-around"
    },
    ".pc-evenly": {
      "place-content": "space-evenly"
    },
    ".pc-between": {
      "place-content": "space-between"
    },
    ".pc-baseline": {
      "place-content": "baseline"
    },
    ".pi-start": {
      "place-items": "start"
    },
    ".pi-end": {
      "place-items": "end"
    },
    ".pi-center": {
      "place-items": "center"
    },
    ".pi-stretch": {
      "place-items": "stretch"
    },
    ".pi-baseline": {
      "place-items": "baseline"
    },
    ".ps-start": {
      "place-self": "start"
    },
    ".ps-end": {
      "place-self": "end"
    },
    ".ps-center": {
      "place-self": "center"
    },
    ".ps-stretch": {
      "place-self": "stretch"
    },
    ".ps-auto": {
      "place-self": "auto"
    },
    ".ji-start": {
      "justify-items": "start"
    },
    ".ji-end": {
      "justify-items": "end"
    },
    ".ji-center": {
      "justify-items": "center"
    },
    ".ji-stretch": {
      "justify-items": "stretch"
    },
    ".js-start": {
      "justify-self": "start"
    },
    ".js-end": {
      "justify-self": "end"
    },
    ".js-center": {
      "justify-self": "center"
    },
    ".js-stretch": {
      "justify-self": "stretch"
    },
    ".js-auto": {
      "justify-self": "auto"
    },
    ".gaf-row": {
      "grid-auto-flow": "row"
    },
    ".gaf-column": {
      "grid-auto-flow": "column"
    },
    ".gaf-row-dense": {
      "grid-auto-flow": "row dense"
    },
    ".gaf-column-dense": {
      "grid-auto-flow": "column dense"
    },
    ".gaf-dense": {
      "grid-auto-flow": "dense"
    }
  }), e(
    {
      gtc: (r) => {
        const w = Number(r);
        return !isNaN(w) && Number.isInteger(w) || r === "auto-fill" || r === "auto-fit" ? {
          "--flowww-grid-template-columns-count": r,
          "grid-template-columns": "repeat(var(--flowww-grid-template-columns-count), minmax(var(--flowww-grid-template-columns-min), var(--flowww-grid-template-columns-max)))"
        } : {
          "--flowww-grid-template-columns-count": "--flowww-grid-template-columns-count",
          "grid-template-columns": r
        };
      }
    },
    {
      values: t
    }
  ), e(
    {
      gtr: (r) => {
        const w = Number(r);
        return !isNaN(w) && Number.isInteger(w) || r === "auto-fill" || r === "auto-fit" ? {
          "--flowww-grid-template-rows-count": r,
          "grid-template-rows": "repeat(var(--flowww-grid-template-rows-count), minmax(var(--flowww-grid-template-rows-min), var(--flowww-grid-template-rows-max)))"
        } : {
          "--flowww-grid-template-rows-count": "--flowww-grid-template-rows-count",
          "grid-template-rows": r
        };
      }
    },
    {
      values: t
    }
  ), e(
    {
      gtcs: (r) => ({
        "--flowww-grid-template-columns-min": r,
        "--flowww-grid-template-columns-max": r,
        "grid-template-columns": "repeat(var(--flowww-grid-template-columns-count), minmax(var(--flowww-grid-template-columns-min), var(--flowww-grid-template-columns-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gtcm: (r) => ({
        "--flowww-grid-template-columns-min": r,
        "grid-template-columns": "repeat(var(--flowww-grid-template-columns-count), minmax(var(--flowww-grid-template-columns-min), var(--flowww-grid-template-columns-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gtcx: (r) => ({
        "--flowww-grid-template-columns-max": r,
        "grid-template-columns": "repeat(var(--flowww-grid-template-columns-count), minmax(var(--flowww-grid-template-columns-min), var(--flowww-grid-template-columns-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gtrs: (r) => ({
        "--flowww-grid-template-rows-min": r,
        "--flowww-grid-template-rows-max": r,
        "grid-template-rows": "repeat(var(--flowww-grid-template-rows-count), minmax(var(--flowww-grid-template-rows-min), var(--flowww-grid-template-rows-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gtrm: (r) => ({
        "--flowww-grid-template-rows-min": r,
        "grid-template-rows": "repeat(var(--flowww-grid-template-rows-count), minmax(var(--flowww-grid-template-rows-min), var(--flowww-grid-template-rows-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gtrx: (r) => ({
        "--flowww-grid-template-rows-max": r,
        "grid-template-rows": "repeat(var(--flowww-grid-template-rows-count), minmax(var(--flowww-grid-template-rows-min), var(--flowww-grid-template-rows-max)))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gac: (r) => ({
        "--flowww-grid-auto-columns-min": r,
        "--flowww-grid-auto-columns-max": r,
        "grid-auto-columns": "minmax(var(--flowww-grid-auto-columns-min), var(--flowww-grid-auto-columns-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gar: (r) => ({
        "--flowww-grid-auto-rows-min": r,
        "--flowww-grid-auto-rows-max": r,
        "grid-auto-rows": "minmax(var(--flowww-grid-auto-rows-min), var(--flowww-grid-auto-rows-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gacm: (r) => ({
        "--flowww-grid-auto-columns-min": r,
        "grid-auto-columns": "minmax(var(--flowww-grid-auto-columns-min), var(--flowww-grid-auto-columns-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gacx: (r) => ({
        "--flowww-grid-auto-columns-max": r,
        "grid-auto-columns": "minmax(var(--flowww-grid-auto-columns-min), var(--flowww-grid-auto-columns-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      garm: (r) => ({
        "--flowww-grid-auto-rows-min": r,
        "grid-auto-rows": "minmax(var(--flowww-grid-auto-rows-min), var(--flowww-grid-auto-rows-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      garx: (r) => ({
        "--flowww-grid-auto-rows-max": r,
        "grid-auto-rows": "minmax(var(--flowww-grid-auto-rows-min), var(--flowww-grid-auto-rows-max))"
      })
    },
    {
      values: o
    }
  ), e(
    {
      gc: (r) => r === "auto" ? {
        "grid-column": "auto"
      } : r === "full" ? {
        "grid-column": "1 / -1"
      } : {
        "grid-column": `span ${r} / span ${r}`
      }
    },
    {
      values: l
    }
  ), e(
    {
      gr: (r) => r === "auto" ? {
        "grid-row": "auto"
      } : r === "full" ? {
        "grid-row": "1 / -1"
      } : {
        "grid-row": `span ${r} / span ${r}`
      }
    },
    {
      values: l
    }
  ), e(
    {
      gcs: (r) => ({
        "grid-column-start": r
      })
    },
    {
      values: a
    }
  ), e(
    {
      gce: (r) => ({
        "grid-column-end": r
      })
    },
    {
      values: a
    }
  ), e(
    {
      grs: (r) => ({
        "grid-row-start": r
      })
    },
    {
      values: a
    }
  ), e(
    {
      gre: (r) => ({
        "grid-row-end": r
      })
    },
    {
      values: a
    }
  ), e(
    {
      gx: (r) => ({
        "column-gap": r
      })
    },
    {
      values: n
    }
  ), e(
    {
      gy: (r) => ({
        "row-gap": r
      })
    },
    {
      values: n
    }
  );
});
export {
  i as gridUtilites
};
