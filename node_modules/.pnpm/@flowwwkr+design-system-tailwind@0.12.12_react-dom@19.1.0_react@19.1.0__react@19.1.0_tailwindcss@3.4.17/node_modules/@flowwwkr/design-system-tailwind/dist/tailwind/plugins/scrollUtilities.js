import W from "tailwindcss/plugin";
import { borderWidthTheme as v, spacingTheme as O } from "../themes/index.js";
import { hexToHsla as u, hslaToHex as w } from "../../utils/color-converter.js";
const C = W(function({
  addComponents: $,
  addUtilities: S,
  matchUtilities: i,
  theme: y
}) {
  $({
    ".scr-visible": {
      "&::-webkit-scrollbar-thumb": {
        "border-radius": "0.4rem",
        cursor: "pointer"
      },
      "&::-webkit-scrollbar-button": {
        display: "none"
      },
      "&::-webkit-scrollbar-corner": {
        "background-color": "transparent"
      }
    },
    ".scr-hover": {
      "&::-webkit-scrollbar-track": {
        "background-color": "transparent"
      },
      "&::-webkit-scrollbar-button": {
        display: "none"
      },
      "&::-webkit-scrollbar-corner": {
        "background-color": "transparent"
      },
      "&::-webkit-scrollbar-thumb": {
        backgroundColor: "transparent",
        "border-radius": "0.4rem",
        cursor: "pointer"
      }
    },
    ".scr-hidden": {
      "scrollbar-width": "none",
      " -ms-overflow-style": "none",
      "&::-webkit-scrollbar": {
        display: "none"
      }
    }
  }), i(
    {
      sbc: (r) => {
        if (typeof r == "object" && r.light.surface === "inherit")
          return {
            "&.scr-visible": {
              "&::-webkit-scrollbar-track": {
                "background-color": "inherit"
              },
              "&::-webkit-scrollbar-thumb": {
                "background-color": "inherit"
              },
              '&:is([data-theme="dark"] *)::-webkit-scrollbar-thumb': {
                "background-color": "inherit"
              },
              '&:is([data-theme="dark"] *)::-webkit-scrollbar-track': {
                "background-color": "inherit"
              }
            },
            "&.scr-hover": {
              "&:hover::-webkit-scrollbar-thumb": {
                "background-color": "inherit"
              },
              '&:is([data-theme="dark"] *):hover::-webkit-scrollbar-thumb': {
                "background-color": "inherit"
              }
            }
          };
        let o = "#fff", c = "#000", t = "#000", a = "#fff";
        if (typeof r == "string" && r.startsWith("#")) {
          const { h: g, s: m, l: p, a: f } = u(r), x = w(g, m, p > 50 ? 10 : 95, f), j = w(g, m, 100 - p, f), H = w(g, m, p >= 50 ? 95 : 10, f);
          o = r, c = x, t = j, a = H;
        } else
          o = r.light.surface, c = r.light.object, t = r.dark.surface, a = r.dark.object;
        if (typeof o != "string" || typeof t != "string" || typeof c != "string" || typeof a != "string" || !o.startsWith("#") || !t.startsWith("#") || !c.startsWith("#") || !a.startsWith("#"))
          throw new Error("Invalid surface color");
        const {
          h: e,
          s: b,
          l: s,
          a: n
        } = u(o), {
          h,
          s: d,
          l,
          a: k
        } = u(t);
        return {
          "&.scr-visible": {
            "&::-webkit-scrollbar-track": {
              "background-color": `hsla(${e}, ${b}%, ${s}%, ${n})`
            },
            "&::-webkit-scrollbar-thumb": {
              "background-color": `hsla(${e}, ${b}%, ${s > 50 ? s - 10 : s + 10}%, ${n})`
            },
            '&:is([data-theme="dark"] *)::-webkit-scrollbar-track': {
              "background-color": `hsla(${h}, ${d}%, ${l}%, ${k})`
            },
            '&:is([data-theme="dark"] *)::-webkit-scrollbar-thumb': {
              "background-color": `hsla(${h}, ${d}%, ${l > 50 ? l - 10 : l + 10}%, ${k})`
            }
          },
          "&.scr-hover": {
            "&:hover::-webkit-scrollbar-thumb": {
              "background-color": `hsla(${e}, ${b}%, ${s}%, ${n})`
            },
            '&:is([data-theme="dark"] *):hover::-webkit-scrollbar-thumb': {
              "background-color": `hsla(${h}, ${d}%, ${l}%, ${k})`
            }
          }
        };
      }
    },
    { values: y("colors") }
  ), S({
    ".scr-auto": {
      "scroll-behavior": "auto"
    },
    ".scr-smooth": {
      "scroll-behavior": "smooth"
    }
  }), i(
    {
      sbs: (r) => ({
        "&::-webkit-scrollbar": {
          width: r,
          height: r
        }
      })
    },
    {
      values: v
    }
  ), i(
    {
      "scr-p": (r) => ({
        "scroll-padding": r
      }),
      "scr-px": (r) => ({
        "scroll-padding-top": r,
        "scroll-padding-bottom": r
      }),
      "scr-py": (r) => ({
        "scroll-padding-left": r,
        "scroll-padding-right": r
      }),
      "scr-pt": (r) => ({
        "scroll-padding-top": r
      }),
      "scr-pb": (r) => ({
        "scroll-padding-bottom": r
      }),
      "scr-pl": (r) => ({
        "scroll-padding-left": r
      }),
      "scr-pr": (r) => ({
        "scroll-padding-right": r
      }),
      "scr-m": (r) => ({
        "scroll-margin": r
      }),
      "scr-mx": (r) => ({
        "scroll-margin-top": r,
        "scroll-margin-bottom": r
      }),
      "scr-my": (r) => ({
        "scroll-margin-left": r,
        "scroll-margin-right": r
      }),
      "scr-mt": (r) => ({
        "scroll-margin-top": r
      }),
      "scr-mb": (r) => ({
        "scroll-margin-bottom": r
      }),
      "scr-ml": (r) => ({
        "scroll-margin-left": r
      }),
      "scr-mr": (r) => ({
        "scroll-margin-right": r
      })
    },
    {
      values: O,
      supportsNegativeValues: !0
    }
  );
});
export {
  C as scrollUtilities
};
