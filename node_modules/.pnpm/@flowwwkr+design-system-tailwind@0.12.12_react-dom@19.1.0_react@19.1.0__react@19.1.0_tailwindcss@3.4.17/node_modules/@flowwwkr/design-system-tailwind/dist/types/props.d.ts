import { BlockStyle, ButtonStyle, CheckBoxStyle, ContainerStyle, FlexStyle, HrStyle, IconStyle, ImageStyle, InputStyle, Responsive, ScrollStyle, SpanStyle, SpinnerStyle, PseudoState, TableStyle, TextStyle, PseudoClass, GridStyle, TextareaStyle, TableItemStyle, Theme } from './style';
type GroupPseudoClassUnion = `group-${string & PseudoClass[keyof PseudoClass]}`;
type GroupPseudoClassObject = {
    [K in GroupPseudoClassUnion as K extends `${infer Prefix}-${infer Rest}` ? `${Prefix}${Capitalize<Rest>}` : never]: K;
};
type GroupName = 'cnt' | 'bx' | 'btn' | 'lnk' | 'li' | 'itm' | 'wrp';
type GroupNamePseudoClassUnion = `group-${string & PseudoClass[keyof PseudoClass]}/${GroupName}`;
type GroupNamePseudoClassObject = {
    [K in GroupNamePseudoClassUnion as K extends `${infer Prefix}-${infer Rest}/${infer Suffix}` ? `${Prefix}${Capitalize<Rest>}${Capitalize<Suffix>}` : never]: K;
};
interface GroupPseudoClass extends GroupPseudoClassObject, GroupNamePseudoClassObject {
}
type Prefix<U extends string, T> = {
    [K in keyof T]: `${U}:${Extract<NonNullable<T[K]>, string>}`;
};
type StateStyle<T> = {
    [K in keyof PseudoState]?: Prefix<NonNullable<PseudoState[K]>, T>;
};
type GroupStyle<T> = {
    [K in keyof GroupPseudoClass]?: Prefix<NonNullable<GroupPseudoClass[K]>, T>;
};
type ThemeGroupStateStyle<T> = {
    [K in keyof Theme]?: Prefix<NonNullable<Theme[K]>, T> & {
        [L in keyof PseudoState]?: Prefix<`${NonNullable<Theme[K]>}:${NonNullable<PseudoState[L]>}`, T>;
    } & {
        [L in keyof GroupPseudoClass]?: Prefix<`${NonNullable<Theme[K]>}:${NonNullable<GroupPseudoClass[L]>}`, T>;
    };
};
type ResponsiveThemeGroupStateStyle<T> = {
    [K in keyof Responsive]?: Prefix<NonNullable<Responsive[K]>, T> & {
        [L in keyof Theme]?: Prefix<`${NonNullable<Responsive[K]>}:${NonNullable<Theme[L]>}`, T> & {
            [M in keyof PseudoState]?: Prefix<`${NonNullable<Responsive[K]>}:${NonNullable<Theme[L]>}:${NonNullable<PseudoState[M]>}`, T>;
        };
    };
};
interface WrapperStyleByState extends ContainerStyle, StateStyle<ContainerStyle>, GroupStyle<ContainerStyle> {
}
export interface WrapperStyleProps extends WrapperStyleByState, ThemeGroupStateStyle<ContainerStyle>, ResponsiveThemeGroupStateStyle<ContainerStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface BlockStyleByState extends BlockStyle, StateStyle<BlockStyle>, GroupStyle<BlockStyle> {
}
export interface BlockStyleProps extends BlockStyleByState, ThemeGroupStateStyle<BlockStyle>, ResponsiveThemeGroupStateStyle<BlockStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface FlexStyleByState extends FlexStyle, StateStyle<FlexStyle>, GroupStyle<FlexStyle> {
}
export interface FlexStyleProps extends FlexStyleByState, ThemeGroupStateStyle<FlexStyle>, ResponsiveThemeGroupStateStyle<FlexStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface ButtonStyleByState extends ButtonStyle, StateStyle<ButtonStyle>, GroupStyle<ButtonStyle> {
}
export interface ButtonStyleProps extends ButtonStyleByState, ThemeGroupStateStyle<ButtonStyle>, ResponsiveThemeGroupStateStyle<ButtonStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface IconStyleByState extends IconStyle, StateStyle<IconStyle>, GroupStyle<IconStyle> {
}
export interface IconStyleProps extends IconStyleByState, ThemeGroupStateStyle<IconStyle>, ResponsiveThemeGroupStateStyle<IconStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface HrStyleByState extends HrStyle, StateStyle<HrStyle>, GroupStyle<HrStyle> {
}
export interface HrStyleProps extends HrStyleByState, ThemeGroupStateStyle<HrStyle>, ResponsiveThemeGroupStateStyle<HrStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface ImageStyleByState extends ImageStyle, StateStyle<ImageStyle>, GroupStyle<ImageStyle> {
}
export interface ImageStyleProps extends ImageStyleByState, ThemeGroupStateStyle<ImageStyle>, ResponsiveThemeGroupStateStyle<ImageStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface TextStyleByState extends TextStyle, StateStyle<TextStyle>, GroupStyle<TextStyle> {
}
export interface TextStyleProps extends TextStyleByState, ThemeGroupStateStyle<TextStyle>, ResponsiveThemeGroupStateStyle<TextStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface SpinnerStyleByState extends SpinnerStyle, StateStyle<SpinnerStyle>, GroupStyle<SpinnerStyle> {
}
export interface SpinnerStyleProps extends SpinnerStyleByState, ThemeGroupStateStyle<SpinnerStyle>, ResponsiveThemeGroupStateStyle<SpinnerStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface TableStyleByState extends TableStyle, StateStyle<TableStyle>, GroupStyle<TableStyle> {
}
export interface TableStyleProps extends TableStyleByState, ThemeGroupStateStyle<TableStyle>, ResponsiveThemeGroupStateStyle<TableStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface TableItemStyleByState extends TableItemStyle, StateStyle<TableItemStyle>, GroupStyle<TableItemStyle> {
}
export interface TableItemStyleProps extends TableItemStyleByState, ThemeGroupStateStyle<TableItemStyle>, ResponsiveThemeGroupStateStyle<TableItemStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface InputStyleByState extends InputStyle, StateStyle<InputStyle>, GroupStyle<InputStyle> {
}
export interface InputStyleProps extends InputStyleByState, ThemeGroupStateStyle<InputStyle>, ResponsiveThemeGroupStateStyle<InputStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface TextareaStyleByState extends TextareaStyle, StateStyle<TextareaStyle>, GroupStyle<TextareaStyle> {
}
export interface TextareaStyleProps extends TextareaStyleByState, ThemeGroupStateStyle<TextareaStyle>, ResponsiveThemeGroupStateStyle<TextareaStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface CheckBoxStyleByState extends CheckBoxStyle, StateStyle<CheckBoxStyle>, GroupStyle<CheckBoxStyle> {
}
export interface CheckBoxStyleProps extends CheckBoxStyleByState, ThemeGroupStateStyle<CheckBoxStyle>, ResponsiveThemeGroupStateStyle<CheckBoxStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface ScrollStyleByState extends ScrollStyle, StateStyle<ScrollStyle>, GroupStyle<ScrollStyle> {
}
export interface ScrollStyleProps extends ScrollStyleByState, ThemeGroupStateStyle<ScrollStyle>, ResponsiveThemeGroupStateStyle<ScrollStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface SpanStyleByState extends SpanStyle, StateStyle<SpanStyle>, GroupStyle<SpanStyle> {
}
export interface SpanStyleProps extends SpanStyleByState, ThemeGroupStateStyle<SpanStyle>, ResponsiveThemeGroupStateStyle<SpanStyle> {
    group?: `group/${GroupName}` | 'group';
}
interface GridStyleByState extends GridStyle, StateStyle<GridStyle>, GroupStyle<GridStyle> {
}
export interface GridStyleProps extends GridStyleByState, ThemeGroupStateStyle<GridStyle>, ResponsiveThemeGroupStateStyle<GridStyle> {
    group?: `group/${GroupName}` | 'group';
}
export {};
