const b = (t) => {
  let e = 0, r = 0, o = 0, n = 1;
  if (/^#([0-9a-fA-F]{3,4})$/.test(t))
    e = parseInt(t[1] + t[1], 16), r = parseInt(t[2] + t[2], 16), o = parseInt(t[3] + t[3], 16), t.length === 5 && (n = parseInt(t[4] + t[4], 16) / 16);
  else if (/^#([0-9a-fA-F]{6,8})$/.test(t))
    e = parseInt(t.slice(1, 3), 16), r = parseInt(t.slice(3, 5), 16), o = parseInt(t.slice(5, 7), 16), t.length === 9 && (n = parseInt(t.slice(7, 9), 16) / 255);
  else
    throw new Error("Invalid hex color");
  return { r: e, g: r, b: o, a: n };
}, g = (t, e, r, o = 1) => {
  if (typeof t != "number" || typeof e != "number" || typeof r != "number" || typeof o != "number" || t < 0 || t > 255 || e < 0 || e > 255 || r < 0 || r > 255 || o < 0 || o > 1)
    throw new Error("Invalid RGB or Alpha value");
  t /= 255, e /= 255, r /= 255;
  const n = Math.max(t, e, r), a = Math.min(t, e, r);
  let s = (n + a) / 2, l = n === a ? 0 : (n - a) / (1 - Math.abs(2 * s - 1)), i = 0;
  return n !== a && (n === t ? i = (e - r) / (n - a) : n === e ? i = 2 + (r - t) / (n - a) : i = 4 + (t - e) / (n - a), i = Math.round(i * 60), i < 0 && (i += 360)), l = +(l * 100).toFixed(1), s = +(s * 100).toFixed(1), { h: i, s: l, l: s, a: o };
}, $ = (t) => {
  const { r: e, g: r, b: o, a: n } = b(t), { h: a, s, l, a: i } = g(e, r, o, n);
  return { h: a, s, l, a: i };
}, y = (t, e, r, o = 1) => {
  if (typeof t != "number" || typeof e != "number" || typeof r != "number" || typeof o != "number" || t < 0 || t > 360 || e < 0 || e > 100 || r < 0 || r > 100 || o < 0 || o > 1)
    throw new Error("Invalid HSL or Alpha value");
  t /= 360, e /= 100, r /= 100;
  let n = 0, a = 0, s = 0;
  if (e === 0)
    n = a = s = r;
  else {
    const c = (u, S, f) => (f < 0 && (f += 1), f > 1 && (f -= 1), f < 0.16666666666666666 ? u + (S - u) * 6 * f : f < 0.5 ? S : f < 0.6666666666666666 ? u + (S - u) * (0.6666666666666666 - f) * 6 : u), p = r < 0.5 ? r * (1 + e) : r + e - r * e, d = 2 * r - p;
    n = c(d, p, t + 0.3333333333333333), a = c(d, p, t), s = c(d, p, t - 0.3333333333333333);
  }
  const l = Math.round(n * 255), i = Math.round(a * 255), m = Math.round(s * 255), I = Math.round(o * 255);
  return o === 1 ? `#${l.toString(16).padStart(2, "0")}${i.toString(16).padStart(2, "0")}${m.toString(16).padStart(2, "0")}` : `#${l.toString(16).padStart(2, "0")}${i.toString(16).padStart(2, "0")}${m.toString(16).padStart(2, "0")}${I.toString(16).padStart(2, "0")}`;
};
export {
  $ as hexToHsla,
  b as hexToRgba,
  y as hslaToHex,
  g as rgbToHsla
};
