import { Config } from 'tailwindcss/types/config';
declare const wrapFTConfig: (tailwindConfig: Config) => import('tailwindcss/types/config').RequiredConfig & Partial<import('tailwindcss/types/config').OptionalConfig> & {
    [x: string]: any;
    content: import('tailwindcss/types/config').ContentConfig;
    important?: Partial<import('tailwindcss/types/config').ImportantConfig> | undefined;
    prefix?: string | undefined;
    separator?: string | undefined;
    safelist?: import('tailwindcss/types/config').SafelistConfig[] | undefined;
    blocklist?: string[] | undefined;
    presets?: Partial<Config>[] | undefined;
    future?: Partial<import('tailwindcss/types/config').FutureConfig> | undefined;
    experimental?: Partial<import('tailwindcss/types/config').ExperimentalConfig> | undefined;
    darkMode?: Partial<import('tailwindcss/types/config').DarkModeConfig> | undefined;
    theme?: Partial<import('tailwindcss/types/config').CustomThemeConfig & {
        extend: Partial<import('tailwindcss/types/config').CustomThemeConfig>;
    }> | undefined;
    corePlugins?: Partial<import('tailwindcss/types/config').CorePluginsConfig> | undefined;
    plugins?: (import('tailwindcss/types/config').PluginCreator | {
        handler: import('tailwindcss/types/config').PluginCreator;
        config?: Partial<Config> | undefined;
    } | {
        (options: any): {
            handler: import('tailwindcss/types/config').PluginCreator;
            config?: Partial<Config> | undefined;
        };
        __isOptionsFunction: true;
    } | undefined)[] | undefined;
};
export default wrapFTConfig;
